{
	"info": {
		"_postman_id": "a44c86f0-a7ab-4d17-afe0-d0d5ab393b91",
		"name": "Automations: API-First Workflows",
		"description": "Workflow **automations** for API-first design, development, testing, publishing, and discovery.\n\nHow to use:\n\n1.  Fork the [\\[ Automations: API-First Workflows \\]](https://www.postman.com/postman/workspace/api-first-workflow-patterns/collection/15950784-a44c86f0-a7ab-4d17-afe0-d0d5ab393b91?action=share&creator=15950784) collection and \\[ Env Automations Config \\] environment from this workspace into your own workspace.\n2.  In your own workspace, set these environment variables. Be sure to be mindful of storing an API key. In general, keeping it in current value rather than initial value and / or using the secret variable type (depending on your Postman team’s config) is the best practice and way to ensure the API key is not shared more broadly based on the workspace visibility.\n    1.  Environment variables are in the \\[Env Automations Config \\] environment; set these three:\n        1.  postman-api-key\n        2.  target-workspace-id\n        3.  external-schema-url\n3.  If needed, update the current value of the specLanguage variable as appropriate - json or yaml (default: json).\n4.  Optionally, set the genDoc and genMock flags as appropriate - true or false (defaults: true).\n    \n\n**2022-06-23 Update**\n\n*   Added deletion of empty draft api version.\n*   Improved collection documentation. See the new \"how to\" guide above.\n    \n\n**2022-06-21 Update**\n\n*   Automatically handles creating or updating (upserting) API, version, schema, documentation collection, mock collection, mock server, and environment.\n*   Simplified the config to just three environment variables to populate:\n    *   postman-api-key\n    *   target-workspace-id\n    *   external-schema-url\n*   Updated state machine is outlined here: [https://69cc9346-cff2-4817-8eaa-3008aa1c4fdf.mock.pstmn.io/automations/render](https://69cc9346-cff2-4817-8eaa-3008aa1c4fdf.mock.pstmn.io/automations/render)\n    \n\n**2022-04-12 Update**\n\n*   Currently automatically handles deltas to existing schema / mock / smoke tests / documentation collections.\n*   Coming soon:\n    *   automatically handling net new APIs and versions, and related collections;\n    *   simpler env config to get started.",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "Check for API, Version, Schema",
			"item": [
				{
					"name": "Request Schema",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4bed12cd-4e90-4970-8576-43e9e283dc7f",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//handle newlines, double quotes, and escapes in the retrieved schema",
									"//then save it to an env var",
									"let schemaWithNewlines = pm.response.text()",
									"const newLineRegex = /\\n/g",
									"let schemaWithoutNewlines = schemaWithNewlines.replace(newLineRegex, '\\\\n')",
									"const doubleQuoteRegex = /\\\"/g",
									"let schemaWithoutNewlinesOrQuotes = schemaWithoutNewlines.replace(doubleQuoteRegex, '\\\\\"')",
									"const escapeTheEscapes = /\\\\\\\\/g",
									"let escapedEscapes = schemaWithoutNewlinesOrQuotes.replace(escapeTheEscapes, '\\\\\\\\\\\\')",
									"",
									"pm.environment.set('schema', escapedEscapes)",
									"",
									"//for log level debug",
									"//console.log(escapedEscapes)",
									"",
									"let apiName = ''",
									"let apiVersion = ''",
									"",
									"//parse API name and version from the spec",
									"let specAsJson = ''",
									"if (pm.environment.get('specLanguage') === 'yaml') {",
									"    //for log level debug",
									"    //console.log(\"spec language is yaml\")",
									"",
									"    const yaml = pm.collectionVariables.get('js-to-yaml');",
									"    (new Function(yaml))();",
									"",
									"    specAsJson = jsyaml.load(pm.response.text())",
									"} else if (pm.environment.get('specLanguage') === 'json') {",
									"    //for log level debug",
									"    //console.log(\"spec language is json\")",
									"    ",
									"    specAsJson = pm.response.json()",
									"}",
									"",
									"//for log level debug",
									"//console.log('spec as json: ')",
									"//console.log(specAsJson)",
									"",
									"apiName = specAsJson.info.title",
									"apiVersion = specAsJson.info.version",
									"",
									"console.log('apiName: ' + apiName)",
									"console.log('apiVersion: ' + apiVersion)",
									"",
									"pm.environment.set('api-name-from-schema', apiName)",
									"pm.environment.set('api-version-from-schema', apiVersion)"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "440c4c03-81e0-4279-9b84-0c4aad9e3b29",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": "{{external-schema-url}}"
					},
					"response": []
				},
				{
					"name": "Check for Existing API",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "66d51698-bdca-45f0-910b-a8940cfb0f56",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//if the api exists, don't create it",
									"if (pm.response.json().apis.length != 0) {",
									"    console.log(\"api exists\")",
									"    pm.environment.set(\"api-id\", pm.response.json().apis[0].id)",
									"    postman.setNextRequest(\"Check for Existing API Version\")",
									"} else {",
									"    console.log(\"api does not exist; will create it\")",
									"    postman.setNextRequest(\"Create API\")",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "fd3c0bf8-c407-4d15-9a75-f76196e1ef6a",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "b52f457c-4700-40f9-a886-d1d74ddda1ab",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.getpostman.com/apis?workspace={{target-workspace-id}}&name={{api-name-from-schema}}",
							"protocol": "https",
							"host": [
								"api",
								"getpostman",
								"com"
							],
							"path": [
								"apis"
							],
							"query": [
								{
									"key": "workspace",
									"value": "{{target-workspace-id}}",
									"description": "Only return APIs that are inside the given workspace."
								},
								{
									"key": "since",
									"value": "{{since}}",
									"description": "Only return APIs that have been updated after this time. Time is represented using the ISO 8601 date and time format.",
									"disabled": true
								},
								{
									"key": "until",
									"value": "{{until}}",
									"description": "Only return APIs that have been updated before this time. Time is represented using the ISO 8601 date and time format.",
									"disabled": true
								},
								{
									"key": "createdBy",
									"value": "{{createdBy}}",
									"description": "Only return APIs that have been created by the user ID represented by the given value.",
									"disabled": true
								},
								{
									"key": "updatedBy",
									"value": "{{updatedBy}}",
									"description": "Only return APIs that have been updated by the user ID represented by the given value.",
									"disabled": true
								},
								{
									"key": "isPublic",
									"value": "{{isPublic}}",
									"description": "Only return APIs with the corresponding privacy state. Public APIs have the isPublic value true; private APIs have the isPublic value false.",
									"disabled": true
								},
								{
									"key": "summary",
									"value": "{{summary}}",
									"description": "Only return APIs whose summary includes the given value. Matching is case insensitive.",
									"disabled": true
								},
								{
									"key": "description",
									"value": "{{description}}",
									"description": "Only return APIs whose description includes the given value. Matching is case insensitive.",
									"disabled": true
								},
								{
									"key": "sort",
									"value": "{{sort}}",
									"description": "The value of sort can be one of the names of the fields included in the response.",
									"disabled": true
								},
								{
									"key": "direction",
									"value": "{{direction}}",
									"description": "The sorting direction, which can be ascending or descending. The value can be asc to specify an ascending direction or desc to specify a descending direction. If none is specified, the default sorting direction is descending for timestamp and numeric fields and ascending otherwise. An ID is not considered a numeric field.",
									"disabled": true
								},
								{
									"key": "name",
									"value": "{{api-name-from-schema}}"
								}
							]
						},
						"description": "This call fetches all the APIs present in the specified workspace\n\nResponse contains an array named `apis` which would contain all the details of APIs present in the workspace.\n\n> Requires <a href=\"#authentication\">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter."
					},
					"response": [
						{
							"id": "561630c5-31f9-4778-80a6-fcbb36de0c53",
							"name": "Filter APIs by name",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://api.getpostman.com/apis?name=granite",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "c90a3482-f80d-43d6-9dfb-0830f5e43605",
											"description": "Only return APIs that are inside the given workspace.",
											"disabled": true
										},
										{
											"key": "since",
											"value": "{{since}}",
											"description": "Only return APIs that have been updated after this time. Time is represented using the ISO 8601 date and time format.",
											"disabled": true
										},
										{
											"key": "until",
											"value": "{{until}}",
											"description": "Only return APIs that have been updated before this time. Time is represented using the ISO 8601 date and time format.",
											"disabled": true
										},
										{
											"key": "createdBy",
											"value": "{{createdBy}}",
											"description": "Only return APIs that have been created by the user ID represented by the given value.",
											"disabled": true
										},
										{
											"key": "updatedBy",
											"value": "{{updatedBy}}",
											"description": "Only return APIs that have been updated by the user ID represented by the given value.",
											"disabled": true
										},
										{
											"key": "isPublic",
											"value": "{{isPublic}}",
											"description": "Only return APIs with the corresponding privacy state. Public APIs have the isPublic value true; private APIs have the isPublic value false.",
											"disabled": true
										},
										{
											"key": "name",
											"value": "granite",
											"description": "Only return APIs whose name includes the given value. Matching is case insensitive."
										},
										{
											"key": "summary",
											"value": "{{summary}}",
											"description": "Only return APIs whose summary includes the given value. Matching is case insensitive.",
											"disabled": true
										},
										{
											"key": "description",
											"value": "{{description}}",
											"description": "Only return APIs whose description includes the given value. Matching is case insensitive.",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "{{sort}}",
											"description": "The value of sort can be one of the names of the fields included in the response.",
											"disabled": true
										},
										{
											"key": "direction",
											"value": "{{direction}}",
											"description": "The sorting direction, which can be ascending or descending. The value can be asc to specify an ascending direction or desc to specify a descending direction. If none is specified, the default sorting direction is descending for timestamp and numeric fields and ascending otherwise. An ID is not considered a numeric field.",
											"disabled": true
										}
									]
								}
							},
							"_postman_previewlanguage": "json",
							"header": null,
							"cookie": [],
							"responseTime": null,
							"body": "[\n    {\n        \"createdBy\": 28613,\n        \"updatedBy\": 42847,\n        \"id\": \"3b8bb76c-f6a9-4726-a5ab-5730b69ba272\",\n        \"name\": \"Ergonomic Granite Fish\",\n        \"summary\": \"Awesome Practical Rubber Gloves\",\n        \"description\": \"The beautiful range of Apple Naturalé that has an exciting mix of natural ingredients. With the Goodness of 100% Natural Ingredients\",\n        \"createdAt\": \"2020-06-23T10:11:35.822Z\",\n        \"updatedAt\": \"2020-06-24T05:59:50.822Z\",\n        \"isPublic\": false\n    },\n    {\n        \"createdBy\": 98903,\n        \"updatedBy\": 49619,\n        \"id\": \"32eae81a-7587-45d0-a311-730c4e60545f\",\n        \"name\": \"Licensed Granite Hat\",\n        \"summary\": \"Generic Awesome Steel Computer\",\n        \"description\": \"The Nagasaki Lander is the trademarked name of several series of Nagasaki sport bikes, that started with the 1984 ABC800J\",\n        \"createdAt\": \"2020-10-03T07:47:36.772Z\",\n        \"updatedAt\": \"2020-10-03T10:49:31.772Z\",\n        \"isPublic\": true\n    },\n    {\n        \"createdBy\": 37518,\n        \"updatedBy\": 7722,\n        \"id\": \"1278f755-c1c9-4337-9b46-e39fbaadf0e4\",\n        \"name\": \"Small Granite Shirt\",\n        \"summary\": \"Ergonomic Awesome Frozen Keyboard\",\n        \"description\": \"New ABC 13 9370, 13.3, 5th Gen CoreA5-8250U, 8GB RAM, 256GB SSD, power UHD Graphics, OS 10 Home, OS Office A & J 2016\",\n        \"createdAt\": \"2020-03-08T21:30:19.744Z\",\n        \"updatedAt\": \"2020-03-09T09:34:37.744Z\",\n        \"isPublic\": true\n    }\n]"
						}
					]
				},
				{
					"name": "Check for Existing API Version",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "23b2b9fd-8fe8-4557-881b-a4bd125000f8",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//check if the api version exists, and if so, don't create it",
									"",
									"let retrievedApiVersions = pm.response.json().versions",
									"let apiVersionFromSchema = pm.environment.get(\"api-version-from-schema\")",
									"let apiVersionExists = false",
									"let apiVersionId = \"\"",
									"",
									"//for each retrieved api version",
									"for (const element of retrievedApiVersions) {",
									"    console.log(apiVersionFromSchema)",
									"    //if the version amtches the version from the schema",
									"    if (element.name === apiVersionFromSchema) {",
									"        apiVersionExists = true",
									"        apiVersionId = element.id",
									"    }",
									"}",
									"",
									"console.log(apiVersionExists)",
									"",
									"if (apiVersionExists) {",
									"    console.log(\"api version exists\")",
									"    pm.environment.set(\"api-version-id\", apiVersionId)",
									"    postman.setNextRequest(\"Check for Existing Schema\")",
									"} else {",
									"    console.log(\"api version does not exist; will create it\")",
									"    postman.setNextRequest(\"Create API Version\")",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "0f208bec-fc64-4b67-9b7c-9a95c9fd80b7",
					"request": {
						"method": "GET",
						"header": [],
						"url": "https://api.getpostman.com/apis/{{api-id}}/versions",
						"description": "This call fetches details about the all the API Versions in the specified API.\n\nThe response will contain an array `versions` object which would be a list of all the API Version along with their details.\n\n> Requires <a href=\"#authentication\">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter."
					},
					"response": [
						{
							"id": "3c085335-d3dc-421a-9eea-768b47d219a7",
							"name": "Get All API versions",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": "https://api.getpostman.com/apis/{{apiId}}/versions"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": {
										"content": "",
										"type": "text/plain"
									}
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n\t\"versions\": [\n\t\t{\n\t      \"id\": \"024660a6-c837-46ca-91d8-7e8dd7c669de\",\n\t      \"name\": \"0.1\",\n\t      \"summary\": \"Summary\",\n\t      \"description\": \"Description\",\n\t      \"createdBy\": \"5665\",\n\t      \"createdAt\": \"2019-02-12 19:34:49\",\n\t      \"updatedAt\": \"2019-02-12 19:34:49\"\n\t    },\n\t    {\n\t      \"id\": \"00932d3b-20f1-454f-a77e-38b4023163ea\",\n\t      \"name\": \"0.2\",\n\t      \"summary\": \"Summary\",\n\t      \"description\": \"Description\",\n\t      \"createdBy\": \"5665\",\n\t      \"createdAt\": \"2019-02-12 19:34:49\",\n\t      \"updatedAt\": \"2019-02-12 19:34:49\"\n\t    }\n\t]\n}"
						}
					]
				},
				{
					"name": "Check for Existing Schema",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "e09e6aa2-d1e8-423b-8401-77a918f01208",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "02a43a53-71fa-4172-9c7b-535b661ecae0",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//check if the api schema exists",
									"//if not, create it.",
									"//and if it does exist, update it.",
									"",
									"let retrievedApiSchemaId = pm.response.json().version.schema[0]",
									"",
									"let schemaExists = false",
									"",
									"if (typeof retrievedApiSchemaId !== 'undefined') {",
									"    //schema exists",
									"    postman.setNextRequest(\"Update Schema to Retrieved Spec\")",
									"    pm.environment.set(\"schema-id\", retrievedApiSchemaId)",
									"} else {",
									"    postman.setNextRequest(\"Create Schema for Retrieved Spec\")",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "3db98169-a420-4a40-8f40-8b2e4c08a8fc",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"name": "Content-Type",
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "https://api.getpostman.com/apis/{{api-id}}/versions/{{api-version-id}}",
						"description": "This call updates an existing schema.\n\nRequest body should contain a `schema` object which should atleast have these properties with `string` values:\n\n- **`type`**: Allowed types are `openapi3`, `openapi2`, `openapi1`, `raml` and `graphql`.\n- **`language`** : Allowed languages are `json` and `yaml` for OpenAPI and RAML schema types. GraphQL schema type accepts only `graphql` language.\n- **`schema`**: Optional. If passed, must be the content of the schema as a `string`.\n\nResponse contains a `schema` object with all the details related to the created schema, namely, `id`, `language`, `type` etc. \n\n> Requires <a href=\"#authentication\">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter."
					},
					"response": [
						{
							"id": "1ae12e60-da5b-43a0-84fc-adcc66cc9584",
							"name": "Update Schema To Retrieved Spec",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"name": "Content-Type",
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"schema\": {\n\t\t\"language\": \"{{specLanguage}}\",\n\t\t\"schema\": \"{{retrievedSchema}}\",\n\t\t\"type\": \"{{specType}}\"\n\t}\n}"
								},
								"url": "https://api.getpostman.com/apis/{{apiId}}/versions/{{apiVersionId}}/schemas/{{schemaId}}"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Thu, 24 Mar 2022 15:40:19 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Server",
									"value": "nginx"
								},
								{
									"key": "x-frame-options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "x-srv-trace",
									"value": "v=1;t=0d675a56303e4c7e"
								},
								{
									"key": "x-srv-span",
									"value": "v=1;s=d594939217bc9b1d"
								},
								{
									"key": "ETag",
									"value": "W/\"10c-t32qLh/iwl1g9fwKwQYJMvWBs54\""
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n    \"schema\": {\n        \"id\": \"dfdb7c7e-ab6b-4a92-b34c-b9530240798c\",\n        \"type\": \"openapi3\",\n        \"language\": \"json\",\n        \"createdBy\": \"15950784\",\n        \"updatedBy\": \"15950784\",\n        \"createdAt\": \"2022-03-07T18:29:35.000Z\",\n        \"updatedAt\": \"2022-03-24T15:40:18.000Z\",\n        \"apiVersion\": \"f6f8414c-cc59-48de-9796-f72e7f6db4d1\"\n    }\n}"
						}
					]
				},
				{
					"name": "Update Schema to Retrieved Spec",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "e09e6aa2-d1e8-423b-8401-77a918f01208",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "02a43a53-71fa-4172-9c7b-535b661ecae0",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"postman.setNextRequest(\"Check for Existing Documentation\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "e1cb8481-a902-418a-8a10-3acbf8e9d80e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"name": "Content-Type",
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"schema\": {\n\t\t\"language\": \"{{specLanguage}}\",\n\t\t\"schema\": \"{{schema}}\",\n\t\t\"type\": \"{{specType}}\"\n\t}\n}"
						},
						"url": "https://api.getpostman.com/apis/{{api-id}}/versions/{{api-version-id}}/schemas/{{schema-id}}",
						"description": "This call updates an existing schema.\n\nRequest body should contain a `schema` object which should atleast have these properties with `string` values:\n\n- **`type`**: Allowed types are `openapi3`, `openapi2`, `openapi1`, `raml` and `graphql`.\n- **`language`** : Allowed languages are `json` and `yaml` for OpenAPI and RAML schema types. GraphQL schema type accepts only `graphql` language.\n- **`schema`**: Optional. If passed, must be the content of the schema as a `string`.\n\nResponse contains a `schema` object with all the details related to the created schema, namely, `id`, `language`, `type` etc. \n\n> Requires <a href=\"#authentication\">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter."
					},
					"response": [
						{
							"id": "8b4574e2-7ccf-47b0-a631-b8d382849165",
							"name": "Update Schema To Retrieved Spec",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"name": "Content-Type",
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"schema\": {\n\t\t\"language\": \"{{specLanguage}}\",\n\t\t\"schema\": \"{{retrievedSchema}}\",\n\t\t\"type\": \"{{specType}}\"\n\t}\n}"
								},
								"url": "https://api.getpostman.com/apis/{{apiId}}/versions/{{apiVersionId}}/schemas/{{schemaId}}"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Thu, 24 Mar 2022 15:40:19 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Server",
									"value": "nginx"
								},
								{
									"key": "x-frame-options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "x-srv-trace",
									"value": "v=1;t=0d675a56303e4c7e"
								},
								{
									"key": "x-srv-span",
									"value": "v=1;s=d594939217bc9b1d"
								},
								{
									"key": "ETag",
									"value": "W/\"10c-t32qLh/iwl1g9fwKwQYJMvWBs54\""
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n    \"schema\": {\n        \"id\": \"dfdb7c7e-ab6b-4a92-b34c-b9530240798c\",\n        \"type\": \"openapi3\",\n        \"language\": \"json\",\n        \"createdBy\": \"15950784\",\n        \"updatedBy\": \"15950784\",\n        \"createdAt\": \"2022-03-07T18:29:35.000Z\",\n        \"updatedAt\": \"2022-03-24T15:40:18.000Z\",\n        \"apiVersion\": \"f6f8414c-cc59-48de-9796-f72e7f6db4d1\"\n    }\n}"
						}
					]
				}
			],
			"id": "877ec275-e153-428c-8af2-2a2277ab9163"
		},
		{
			"name": "Create API, Version, Schema",
			"item": [
				{
					"name": "Create API",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "54463eaf-bb30-4d81-a9ad-b011e5164edf",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.environment.set(\"api-id\", pm.response.json().api.id)"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "c6d69c72-b1e3-4d26-a8e7-5b2b81532e03",
					"request": {
						"method": "POST",
						"header": [
							{
								"name": "Content-Type",
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"api\": {\n\t\t\"name\": \"{{api-name-from-schema}}\",\n\t\t\"summary\": \"This is supposed to be a short summary.\",\n\t\t\"description\": \"This is description.\"\n\t}\n}"
						},
						"url": {
							"raw": "https://api.getpostman.com/apis?workspace={{target-workspace-id}}",
							"protocol": "https",
							"host": [
								"api",
								"getpostman",
								"com"
							],
							"path": [
								"apis"
							],
							"query": [
								{
									"key": "workspace",
									"value": "{{target-workspace-id}}"
								}
							]
						},
						"description": "This call creates a new API with a default API Version.  \n\nRequest body should contain an `api` object which should atleast have a property `name`.\n\nResponse contains an `api` object with all the details related to the created API, namely, `id`, `name`, `summary`, `description`, etc. \n\n> Requires <a href=\"#authentication\">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter."
					},
					"response": [
						{
							"id": "8d87959c-13cd-44a5-a7ae-564ae43ba9ed",
							"name": "Create API",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"name": "Content-Type",
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"api\": {\n\t\t\"name\": \"Sync Service API\",\n\t\t\"summary\": \"This is supposed to be a short summary.\",\n\t\t\"description\": \"This is description.\"\n\t}\n}"
								},
								"url": {
									"raw": "https://api.getpostman.com/apis?workspace=c90a3482-f80d-43d6-9dfb-0830f5e43605",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "c90a3482-f80d-43d6-9dfb-0830f5e43605"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": {
										"content": "",
										"type": "text/plain"
									}
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n\t\"api\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t}\n}"
						}
					]
				},
				{
					"name": "Create API Version",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "33ea80ca-d9ec-45bf-b087-a07d18ca39b2",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.environment.set(\"api-version-id\", pm.response.json().version.id)"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "006b50ec-939e-4697-8a60-f439e2cc12f4",
					"request": {
						"method": "POST",
						"header": [
							{
								"name": "Content-Type",
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"version\": {\n\t\t\"name\": \"{{api-version-from-schema}}\"\n\t}\n}"
						},
						"url": "https://api.getpostman.com/apis/{{api-id}}/versions",
						"description": "This call creates a new API version in the specified API.  \n\nRequest body should contain a `version` object which should have fields:\n\n<table>\n<tr>\n\t<td>name</td>\n\t<td>Required. Name of the API Version</td>\n</tr>\n<tr>\n\t<td>source</td>\n\t<td>\n\t\tIf specified, it will copy the contents of the specified api version to create a new api verison.\n\t\t<table>\n\t\t\t<tr>\n\t\t\t\t<td>id</td>\n\t\t\t\t<td>Required. Id of the apiversion from where the details are to be copied</td>\n\t\t\t</tr>\n\t\t\t<tr>\n\t\t\t\t<td>schema</td>\n\t\t\t\t<td>Boolean. If true then copies the schema from the specified api version</td>\n\t\t\t</tr>\n\t\t\t<tr>\n\t\t\t\t<td>relations</td>\n\t\t\t\t<td>Object. {\"&lt;relationType&gt;\": true/false}.  \n\t\t\t\t\tAllowed relation types are `mock`, `monitor`, `documentation`, `contracttest`, `integrationtest`, `testsuite`, `environment`\n\t\t\t\tRelation types which should be copied over to the new api verison</td>\n\t\t\t</tr>\n\t\t</table>\n\t</td>\n</tr>\n</table>\n\nResponse contains a `version` object with all the details related to the created API Version, namely, `id`, `name`, `api`.\n\n> Requires <a href=\"#authentication\">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter."
					},
					"response": [
						{
							"id": "39749478-4dc5-406c-80f5-bacde8f1f75f",
							"name": "Create API version",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"name": "Content-Type",
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"version\": {\n\t\t\"name\": \"1.0\",\n\t\t\"source\": {\n\t\t\t\"id\": \"{{apiVersionId}}\",\n\t\t\t\"schema\": true,\n\t\t\t\"relations\": {\n\t\t\t\t\"monitor\": true,\n\t\t\t\t\"mock\": true,\n\t\t\t\t\"documentation\": true\n\t\t\t}\n\t\t}\n\t}\n}"
								},
								"url": "https://api.getpostman.com/apis/{{apiId}}/versions"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": {
										"content": "",
										"type": "text/plain"
									}
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n\t\"version\": {\n\t\t\"id\": \"d71cf403-c549-4c7c-9dc6-a6a105acf67c\",\n\t\t\"name\": \"1.0\",\n    \t\"api\": \"2b95d07c-8379-4bd1-924f-e7e1af185284\"\n\t}\n}"
						}
					]
				},
				{
					"name": "Get Draft Version ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "33ea80ca-d9ec-45bf-b087-a07d18ca39b2",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.environment.set(\"draft-api-version-id-to-delete\", pm.response.json().versions[1].id)"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "581738c0-2443-4614-bf16-c3b1c400c5f9",
					"request": {
						"method": "GET",
						"header": [
							{
								"name": "Content-Type",
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": "https://api.getpostman.com/apis/{{api-id}}/versions",
						"description": "This call creates a new API version in the specified API.  \n\nRequest body should contain a `version` object which should have fields:\n\n<table>\n<tr>\n\t<td>name</td>\n\t<td>Required. Name of the API Version</td>\n</tr>\n<tr>\n\t<td>source</td>\n\t<td>\n\t\tIf specified, it will copy the contents of the specified api version to create a new api verison.\n\t\t<table>\n\t\t\t<tr>\n\t\t\t\t<td>id</td>\n\t\t\t\t<td>Required. Id of the apiversion from where the details are to be copied</td>\n\t\t\t</tr>\n\t\t\t<tr>\n\t\t\t\t<td>schema</td>\n\t\t\t\t<td>Boolean. If true then copies the schema from the specified api version</td>\n\t\t\t</tr>\n\t\t\t<tr>\n\t\t\t\t<td>relations</td>\n\t\t\t\t<td>Object. {\"&lt;relationType&gt;\": true/false}.  \n\t\t\t\t\tAllowed relation types are `mock`, `monitor`, `documentation`, `contracttest`, `integrationtest`, `testsuite`, `environment`\n\t\t\t\tRelation types which should be copied over to the new api verison</td>\n\t\t\t</tr>\n\t\t</table>\n\t</td>\n</tr>\n</table>\n\nResponse contains a `version` object with all the details related to the created API Version, namely, `id`, `name`, `api`.\n\n> Requires <a href=\"#authentication\">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter."
					},
					"response": [
						{
							"id": "5804d591-bc41-4e05-88ee-bf7e95029b8f",
							"name": "Create API version",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"name": "Content-Type",
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"version\": {\n\t\t\"name\": \"1.0\",\n\t\t\"source\": {\n\t\t\t\"id\": \"{{apiVersionId}}\",\n\t\t\t\"schema\": true,\n\t\t\t\"relations\": {\n\t\t\t\t\"monitor\": true,\n\t\t\t\t\"mock\": true,\n\t\t\t\t\"documentation\": true\n\t\t\t}\n\t\t}\n\t}\n}"
								},
								"url": "https://api.getpostman.com/apis/{{apiId}}/versions"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": {
										"content": "",
										"type": "text/plain"
									}
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n\t\"version\": {\n\t\t\"id\": \"d71cf403-c549-4c7c-9dc6-a6a105acf67c\",\n\t\t\"name\": \"1.0\",\n    \t\"api\": \"2b95d07c-8379-4bd1-924f-e7e1af185284\"\n\t}\n}"
						}
					]
				},
				{
					"name": "Remove Draft Version",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "33ea80ca-d9ec-45bf-b087-a07d18ca39b2",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "eba8fa7f-21bd-4da5-b466-c825f9648e7f",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"name": "Content-Type",
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"version\": {\n\t\t\"name\": \"{{api-version-from-schema}}\"\n\t}\n}"
						},
						"url": "https://api.getpostman.com/apis/{{api-id}}/versions/{{draft-api-version-id-to-delete}}",
						"description": "This call creates a new API version in the specified API.  \n\nRequest body should contain a `version` object which should have fields:\n\n<table>\n<tr>\n\t<td>name</td>\n\t<td>Required. Name of the API Version</td>\n</tr>\n<tr>\n\t<td>source</td>\n\t<td>\n\t\tIf specified, it will copy the contents of the specified api version to create a new api verison.\n\t\t<table>\n\t\t\t<tr>\n\t\t\t\t<td>id</td>\n\t\t\t\t<td>Required. Id of the apiversion from where the details are to be copied</td>\n\t\t\t</tr>\n\t\t\t<tr>\n\t\t\t\t<td>schema</td>\n\t\t\t\t<td>Boolean. If true then copies the schema from the specified api version</td>\n\t\t\t</tr>\n\t\t\t<tr>\n\t\t\t\t<td>relations</td>\n\t\t\t\t<td>Object. {\"&lt;relationType&gt;\": true/false}.  \n\t\t\t\t\tAllowed relation types are `mock`, `monitor`, `documentation`, `contracttest`, `integrationtest`, `testsuite`, `environment`\n\t\t\t\tRelation types which should be copied over to the new api verison</td>\n\t\t\t</tr>\n\t\t</table>\n\t</td>\n</tr>\n</table>\n\nResponse contains a `version` object with all the details related to the created API Version, namely, `id`, `name`, `api`.\n\n> Requires <a href=\"#authentication\">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter."
					},
					"response": [
						{
							"id": "16439965-b0af-42e7-977c-91cc6b1bbc34",
							"name": "Create API version",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"name": "Content-Type",
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"version\": {\n\t\t\"name\": \"1.0\",\n\t\t\"source\": {\n\t\t\t\"id\": \"{{apiVersionId}}\",\n\t\t\t\"schema\": true,\n\t\t\t\"relations\": {\n\t\t\t\t\"monitor\": true,\n\t\t\t\t\"mock\": true,\n\t\t\t\t\"documentation\": true\n\t\t\t}\n\t\t}\n\t}\n}"
								},
								"url": "https://api.getpostman.com/apis/{{apiId}}/versions"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": {
										"content": "",
										"type": "text/plain"
									}
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n\t\"version\": {\n\t\t\"id\": \"d71cf403-c549-4c7c-9dc6-a6a105acf67c\",\n\t\t\"name\": \"1.0\",\n    \t\"api\": \"2b95d07c-8379-4bd1-924f-e7e1af185284\"\n\t}\n}"
						}
					]
				},
				{
					"name": "Create Schema for Retrieved Spec",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "e09e6aa2-d1e8-423b-8401-77a918f01208",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "02a43a53-71fa-4172-9c7b-535b661ecae0",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let retrievedApiSchemaId = pm.response.json().schema.id",
									"pm.environment.set(\"schema-id\", retrievedApiSchemaId)"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "ff08bf73-8412-4a9c-b250-e040ee79d0ab",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"name": "Content-Type",
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"schema\": {\n\t\t\"language\": \"{{specLanguage}}\",\n\t\t\"schema\": \"{{schema}}\",\n\t\t\"type\": \"{{specType}}\"\n\t}\n}"
						},
						"url": "https://api.getpostman.com/apis/{{api-id}}/versions/{{api-version-id}}/schemas",
						"description": "This call updates an existing schema.\n\nRequest body should contain a `schema` object which should atleast have these properties with `string` values:\n\n- **`type`**: Allowed types are `openapi3`, `openapi2`, `openapi1`, `raml` and `graphql`.\n- **`language`** : Allowed languages are `json` and `yaml` for OpenAPI and RAML schema types. GraphQL schema type accepts only `graphql` language.\n- **`schema`**: Optional. If passed, must be the content of the schema as a `string`.\n\nResponse contains a `schema` object with all the details related to the created schema, namely, `id`, `language`, `type` etc. \n\n> Requires <a href=\"#authentication\">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter."
					},
					"response": [
						{
							"id": "8b9c127a-f6fe-4dce-b112-fcef68d2edb8",
							"name": "Update Schema To Retrieved Spec",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"name": "Content-Type",
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"schema\": {\n\t\t\"language\": \"{{specLanguage}}\",\n\t\t\"schema\": \"{{retrievedSchema}}\",\n\t\t\"type\": \"{{specType}}\"\n\t}\n}"
								},
								"url": "https://api.getpostman.com/apis/{{apiId}}/versions/{{apiVersionId}}/schemas/{{schemaId}}"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Thu, 24 Mar 2022 15:40:19 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Server",
									"value": "nginx"
								},
								{
									"key": "x-frame-options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "x-srv-trace",
									"value": "v=1;t=0d675a56303e4c7e"
								},
								{
									"key": "x-srv-span",
									"value": "v=1;s=d594939217bc9b1d"
								},
								{
									"key": "ETag",
									"value": "W/\"10c-t32qLh/iwl1g9fwKwQYJMvWBs54\""
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n    \"schema\": {\n        \"id\": \"dfdb7c7e-ab6b-4a92-b34c-b9530240798c\",\n        \"type\": \"openapi3\",\n        \"language\": \"json\",\n        \"createdBy\": \"15950784\",\n        \"updatedBy\": \"15950784\",\n        \"createdAt\": \"2022-03-07T18:29:35.000Z\",\n        \"updatedAt\": \"2022-03-24T15:40:18.000Z\",\n        \"apiVersion\": \"f6f8414c-cc59-48de-9796-f72e7f6db4d1\"\n    }\n}"
						}
					]
				}
			],
			"id": "007d417c-ad65-4c0f-945e-d53ee28efb59"
		},
		{
			"name": "Upsert Collection Assets",
			"item": [
				{
					"name": "Handle Documentation",
					"item": [
						{
							"name": "Check for Existing Documentation",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f4a55dc3-1f08-4a39-806d-c5cf6ced6d62",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"let documentationExists = (pm.response.json().documentation.length > 0)",
											"",
											"console.log(\"documentationExists: \" + documentationExists)",
											"",
											"generateDocumentation = (pm.environment.get(\"genDoc\") === \"true\")",
											"",
											"if (documentationExists == true) {",
											"    console.log(\"Syncing documentation with schema...\")",
											"    pm.environment.set(\"documentation-entity-id\", pm.response.json().documentation[0].id)",
											"    pm.environment.set(\"documentation-collection-id\", pm.response.json().documentation[0].collectionId)",
											"    postman.setNextRequest(\"Sync Documentation with Schema\")",
											"} else if (documentationExists == false && generateDocumentation == true) {",
											"    console.log(\"Creating documentation collection and relation...\")",
											"    postman.setNextRequest(\"Create Documentation from Schema\")",
											"} else {",
											"    console.log(\"Skipping documentation creation (flag not set)\")",
											"    postman.setNextRequest(\"Check for Existing Mock\")",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "501e0ab5-bef4-479e-8efb-873f18a8799e",
							"request": {
								"method": "GET",
								"header": [],
								"url": "https://api.getpostman.com/apis/{{api-id}}/versions/{{api-version-id}}/documentation",
								"description": "This call fetches all the relations by type which are linked to the specified API version along with their details.\n\nThe response will contain an array with key `{{relationType}}`. Each of the item will consist of all the details related each of the relation.\n\n> Requires <a href=\"#authentication\">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter."
							},
							"response": [
								{
									"id": "ebbc1227-5152-42f9-84d0-942a8cbdb38d",
									"name": "Get documentation relations",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": "https://api.getpostman.com/apis/{{apiId}}/versions/{{apiVersionId}}/relations/documentation"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n    \"documentation\": [\n        {\n            \"id\": \"2a9b8fa8-88b7-4b86-8372-8e3f6f6e07f2\",\n            \"name\": \"C test\",\n            \"updatedAt\": \"2019-08-29T10:18:11.000Z\",\n            \"collectionId\": \"7732157-a8bcd149-2b01-4b4c-8c14-c7d05be77745\"\n        },\n        {\n            \"id\": \"521b0486-ab91-4d3a-9189-43c9380a0533\",\n            \"name\": \"C1\",\n            \"updatedAt\": \"2019-08-29T11:40:39.000Z\",\n            \"collectionId\": \"7332157-a8bcd143-2b01-4b12-8c14-c7d05be77725\"\n        }\n    ]\n}"
								}
							]
						},
						{
							"name": "Sync Documentation with Schema",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aa3c14b6-1be4-4ff5-b935-03b11b5a328e",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"postman.setNextRequest(\"Check for Existing Mock\")"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "881f7789-1609-4073-b59f-cbb5119c9aaf",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"url": "https://api.getpostman.com/apis/{{api-id}}/versions/{{api-version-id}}/documentation/{{documentation-entity-id}}/syncWithSchema",
								"description": "This call allows you to keep the relation in sync with the API schema.\n\n\n> Requires <a href=\"#authentication\">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter."
							},
							"response": [
								{
									"id": "9a6c3f40-2054-40c6-8f9b-6cd4dd60cc11",
									"name": "Sync Documentation with Schema",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": "https://api.getpostman.com/apis/{{apiId}}/versions/{{apiVersionId}}/documentation/{{documentationEntityId}}/syncWithSchema"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Mon, 07 Mar 2022 19:45:10 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "16"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Server",
											"value": "nginx"
										},
										{
											"key": "x-frame-options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "x-srv-trace",
											"value": "v=1;t=7f9a1a1793aff2af"
										},
										{
											"key": "x-srv-span",
											"value": "v=1;s=fb2bde0e595b29cb"
										},
										{
											"key": "ETag",
											"value": "W/\"10-oV4hJxRVSENxc/wX8+mA4/Pe4tA\""
										},
										{
											"key": "Vary",
											"value": "Accept-Encoding"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n    \"success\": true\n}"
								}
							]
						},
						{
							"name": "Create Documentation from Schema",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8101193b-4c97-4e87-bde3-698e4813e671",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "32ae1995-c917-476b-a158-5e2609c255d6",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"{{api-name-from-schema}} | {{api-version-from-schema}} | Documentation\",\n\t\"relations\": [\n\t\t{\n\t\t\t\"type\": \"documentation\"\n\t\t}\t\n\t]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://api.getpostman.com/apis/{{api-id}}/versions/{{api-version-id}}/schemas/{{schema-id}}/collections?workspace={{target-workspace-id}}",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"apis",
										"{{api-id}}",
										"versions",
										"{{api-version-id}}",
										"schemas",
										"{{schema-id}}",
										"collections"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{target-workspace-id}}"
										}
									]
								},
								"description": "This call creates a collection and links it to an API as one or multiple relations. \n\nRequest body requires two keys:\n- `name` - Name of the collection to be created.\n- `relations` - A list of relation(s) to be created.\n\nThe allowed relation types are `contracttest`, `integrationtest`, `testsuite`, and `documentation`.\n\n> Requires <a href=\"#authentication\">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter."
							},
							"response": [
								{
									"id": "25f607ac-47e7-4d40-b206-69bfc2a6e319",
									"name": "Create collection from schema",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"My generated collection\",\n\t\"relations\": [\n\t\t{\n\t\t\t\"type\": \"contracttest\"\n\t\t}\t\n\t]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://api.getpostman.com/apis/{{apiId}}/versions/{{apiVersionId}}/schemas/{{schemaId}}/collections?workspace=c90a3482-f80d-43d6-9dfb-0830f5e43605",
											"protocol": "https",
											"host": [
												"api",
												"getpostman",
												"com"
											],
											"path": [
												"apis",
												"{{apiId}}",
												"versions",
												"{{apiVersionId}}",
												"schemas",
												"{{schemaId}}",
												"collections"
											],
											"query": [
												{
													"key": "workspace",
													"value": "c90a3482-f80d-43d6-9dfb-0830f5e43605"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n    \"collection\": {\n        \"id\": \"e6b0d46a-8722-4f42-ab86-f5f473187ddf\",\n        \"uid\": \"112098-e6b0d46a-8722-4f42-ab86-f5f473187ddf\"\n    },\n    \"relations\": [\n        {\n            \"type\": \"contracttest\",\n            \"id\": \"4b40f06a-5a6a-448f-bfcd-a6dbcb68da22\"\n        }\n    ]\n}"
								}
							]
						}
					],
					"id": "2bf715b8-f597-4148-968c-bca728e91d29"
				},
				{
					"name": "Handle Mock Server and Env",
					"item": [
						{
							"name": "Check for Existing Mock",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f4a55dc3-1f08-4a39-806d-c5cf6ced6d62",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"let mockExists = (pm.response.json().mock.length > 0)",
											"",
											"console.log(\"mockExists: \" + mockExists)",
											"",
											"generateMockServer = (pm.environment.get(\"genMock\") === \"true\")",
											"",
											"if (mockExists == true) {",
											"    console.log(\"Syncing mock with schema...\")",
											"    pm.environment.set(\"mock-entity-id\", pm.response.json().mock[0].id)",
											"    postman.setNextRequest(\"Sync Mock with Schema\")",
											"} else if (mockExists == false && generateMockServer == true) {",
											"    console.log(\"Creating environment, mock collection, and relation...\")",
											"    postman.setNextRequest(\"Create Environment\")",
											"} else {",
											"    postman.setNextRequest(\"Unset Temp Env Vars\")",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "b5157585-fd5d-4bec-978a-0e05d5d04993",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "https://api.getpostman.com/apis/{{api-id}}/versions/{{api-version-id}}/mock",
								"description": "This call fetches all the relations by type which are linked to the specified API version along with their details.\n\nThe response will contain an array with key `{{relationType}}`. Each of the item will consist of all the details related each of the relation.\n\n> Requires <a href=\"#authentication\">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter."
							},
							"response": [
								{
									"id": "db9d0cab-900e-416f-932f-2ed27574ca75",
									"name": "Get documentation relations",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": "https://api.getpostman.com/apis/{{apiId}}/versions/{{apiVersionId}}/relations/documentation"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n    \"documentation\": [\n        {\n            \"id\": \"2a9b8fa8-88b7-4b86-8372-8e3f6f6e07f2\",\n            \"name\": \"C test\",\n            \"updatedAt\": \"2019-08-29T10:18:11.000Z\",\n            \"collectionId\": \"7732157-a8bcd149-2b01-4b4c-8c14-c7d05be77745\"\n        },\n        {\n            \"id\": \"521b0486-ab91-4d3a-9189-43c9380a0533\",\n            \"name\": \"C1\",\n            \"updatedAt\": \"2019-08-29T11:40:39.000Z\",\n            \"collectionId\": \"7332157-a8bcd143-2b01-4b12-8c14-c7d05be77725\"\n        }\n    ]\n}"
								}
							]
						},
						{
							"name": "Sync Mock with Schema",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cd9f4b7d-5b2f-499a-b52f-22e3e6ee6715",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"postman.setNextRequest(\"Unset Temp Env Vars\")"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "b84bc019-a0de-4d6c-a48a-c44042ca3ca8",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"url": "https://api.getpostman.com/apis/{{api-id}}/versions/{{api-version-id}}/mock/{{mock-entity-id}}/syncWithSchema",
								"description": "This call allows you to keep the relation in sync with the API schema.\n\n\n> Requires <a href=\"#authentication\">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter."
							},
							"response": [
								{
									"id": "fba5ddc8-7180-4abb-af3e-abaea53377a9",
									"name": "Sync Documentation with Schema",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": "https://api.getpostman.com/apis/{{apiId}}/versions/{{apiVersionId}}/documentation/{{documentationEntityId}}/syncWithSchema"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Mon, 07 Mar 2022 19:45:10 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "16"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Server",
											"value": "nginx"
										},
										{
											"key": "x-frame-options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "x-srv-trace",
											"value": "v=1;t=7f9a1a1793aff2af"
										},
										{
											"key": "x-srv-span",
											"value": "v=1;s=fb2bde0e595b29cb"
										},
										{
											"key": "ETag",
											"value": "W/\"10-oV4hJxRVSENxc/wX8+mA4/Pe4tA\""
										},
										{
											"key": "Vary",
											"value": "Accept-Encoding"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n    \"success\": true\n}"
								}
							]
						},
						{
							"name": "Create Environment",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "192bfb0c-aae8-4eb3-9860-e2c0a1cf831d",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.environment.set(\"mock-environment-id\", pm.response.json().environment.id)",
											"pm.environment.set(\"mock-environment-uid\", pm.response.json().environment.uid)"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "3ec49129-0c31-4f05-89fb-c81e128a083a",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"environment\": {\n        \"name\": \"Mock Env: {{api-name-from-schema}} | {{api-version-from-schema}}\"\n    }\n}"
								},
								"url": {
									"raw": "https://api.getpostman.com/environments?workspace={{target-workspace-id}}",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"environments"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{target-workspace-id}}"
										}
									]
								},
								"description": "A sample body is added to the request that conforms to the following JSON schema:\n\n```json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"environment\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"name\": {\n              \"type\": \"string\",\n              \"maxLength\": 254,\n              \"minLength\": 1\n            },\n        \"values\": {\n          \"type\": \"array\",\n          \"maxItems\": 100,\n          \"additionalItems\": false,\n          \"items\": {\n              \"type\": \"object\",\n              \"properties\": {\n                \"key\": {\n                  \"type\": \"string\",\n                  \"maxLength\": 254\n                  \"minLength\": 1\n                },\n                \"value\": { \"type\": \"string\" },\n                \"enabled\": { \"type\": \"boolean\" }\n              },\n              \"required\": [\"key\", \"value\"]\n            }\n        }\n      },\n      \"required\": [\"name\"]\n    }\n  },\n  \"required\": [\"environment\"]\n}\n```\n\nOn successful creation of the environment, the API returns the environment name and `id`.\n\nYou can also specify the context of a workspace to create an environment in directly by passing the `workspace` as a query param.\n\n> Requires <a href=\"#authentication\">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter."
							},
							"response": [
								{
									"id": "2373c108-da2b-42a7-bb24-742db2beef29",
									"name": "Create Environment in a Workspace",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"name": "Content-Type",
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"environment\": {\n        \"name\": \"Sample Environment Name (required)\",\n        \"values\": [\n            {\n                \"key\": \"variable_name_1\",\n                \"value\": \"The value of the variable\"\n            },\n            {\n                \"key\": \"variable_name_2\",\n                \"value\": \"\"\n            }\n        ]\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://api.getpostman.com/environments?workspace={{workspace_id}}",
											"protocol": "https",
											"host": [
												"api",
												"getpostman",
												"com"
											],
											"path": [
												"environments"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{workspace_id}}",
													"description": "The workspace ID in which the environment will be created"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"name": "Content-Type",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n    \"environment\": {\n        \"id\": \"f158266e-306b-4702-a2b9-e4ede7878b7a\",\n        \"name\": \"Sample Environment Name (required)\",\n        \"uid\": \"5665-f158266e-306b-4702-a2b9-e4ede7878b7a\"\n    }\n}"
								},
								{
									"id": "22de17d5-84c6-4a24-a8f3-abaf9e97c6f4",
									"name": "Successful Response",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"name": "Content-Type",
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"environment\": {\n        \"name\": \"Sample Environment Name (required)\",\n        \"values\": [\n            {\"key\": \"variable_name_1\", \"value\": \"The value of the variable\"},\n            {\"key\": \"variable_name_2\", \"value\": \"\"}\n        ]\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "https://api.getpostman.com/environments"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"name": "Content-Type",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n    \"environment\": {\n        \"id\": \"f158266e-306b-4702-a2b9-e4ede7878b7a\",\n        \"name\": \"Sample Environment Name (required)\",\n        \"uid\": \"5665-f158266e-306b-4702-a2b9-e4ede7878b7a\"\n    }\n}"
								},
								{
									"id": "8e1fa593-24ee-4df7-9262-e9d6aaa9f5af",
									"name": "Failure Response",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \n}"
										},
										"url": "https://api.getpostman.com/environments"
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n    \"error\": {\n        \"name\": \"malformedRequestError\",\n        \"message\": \"Found 1 errors with the supplied environment.\",\n        \"details\": [\n            \": must have required property 'environment'\"\n        ]\n    }\n}"
								}
							]
						},
						{
							"name": "Create Environment Relation",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "db3c907e-4876-4892-b9fa-ec27cd87c6fa",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "3da57030-2d17-4325-89f1-6fb394c41bd3",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"environment\": [\"{{mock-environment-uid}}\"]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "https://api.getpostman.com/apis/{{api-id}}/versions/{{api-version-id}}/relations",
								"description": "This call allows you to add existing Postman entities as new relations to an API. The request body should contain the relations to be created along with an array of entity IDs. \n\n<table>\n  <tr>\n    <th>Relation</th>\n    <th>Entity ID type</th>\n  <tr>\n  <tr>\n    <td>contracttest</td>\n    <td>Collection UIDs</td>\n  </tr>\n  <tr>\n    <td>integrationtest</td>\n    <td>Collection UIDs</td>\n  </tr>\n  <tr>\n    <td>documentation</td>\n    <td>Collection UIDs</td>\n  </tr>\n  <tr>\n    <td>testsuite</td>\n    <td>Collection UIDs</td>\n  </tr>\n  <tr>\n    <td>environment</td>\n    <td>Environment UIDs</td>\n  </tr>\n  <tr>\n    <td>mock</td>\n    <td>Mock IDs</td>\n  </tr>\n  <tr>\n    <td>monitor</td>\n    <td>Monitor IDs</td>\n  </tr>\n</table>\n\n> Requires <a href=\"#authentication\">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter."
							},
							"response": [
								{
									"id": "c9888dc7-d53a-4908-9756-19034feaae03",
									"name": "Create multiple relations from existing collections",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"contracttest\": [\"112098-a173931c-3340-4c14-b30f-ae62e5fbeb52\"],\n\t\"testsuite\": [\"112098-a173931c-3340-4c14-b30f-ae62e5fbeb52\", \"112098-47958a5a-a2a5-4330-9c9d-60c5166115f2\"],\n\t\"documentation\": [\"112098-47958a5a-a2a5-4330-9c9d-60c5166115f2\"]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "https://api.getpostman.com/apis/{{apiId}}/versions/{{apiVersionId}}/relations"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n    \"contracttest\": [\n        \"5bcece87-ca4b-4e75-a967-2a6845626164\"\n    ],\n    \"testsuite\": [\n        \"e525fa71-035e-4620-acda-ce878524f1e7\",\n        \"17a974b2-ce79-4b95-9d3f-217d6ff7e979\"\n    ],\n    \"documentation\": [\n        \"2084eba6-a17b-4751-8f03-ea60f30ba19c\"\n    ]\n}"
								}
							]
						},
						{
							"name": "Create Collection from Schema",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "210a825a-8620-46d1-8127-22204a250425",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.environment.set(\"mock-collection-id\", pm.response.json().collection.id)",
											"pm.environment.set(\"mock-collection-uid\", pm.response.json().collection.uid)"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "963f0d21-f81e-4097-afdb-0bcb8c733bce",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"{{api-name-from-schema}} | {{api-version-from-schema}} | Mock Driver\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://api.getpostman.com/apis/{{api-id}}/versions/{{api-version-id}}/schemas/{{schema-id}}/collections?workspace={{target-workspace-id}}",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"apis",
										"{{api-id}}",
										"versions",
										"{{api-version-id}}",
										"schemas",
										"{{schema-id}}",
										"collections"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{target-workspace-id}}"
										}
									]
								},
								"description": "This call creates a collection and links it to an API as one or multiple relations. \n\nRequest body requires two keys:\n- `name` - Name of the collection to be created.\n- `relations` - A list of relation(s) to be created.\n\nThe allowed relation types are `contracttest`, `integrationtest`, `testsuite`, and `documentation`.\n\n> Requires <a href=\"#authentication\">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter."
							},
							"response": [
								{
									"id": "ad9b8231-b5cb-4d0b-bd60-047fdde4d544",
									"name": "Create collection from schema",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"My generated collection\",\n\t\"relations\": [\n\t\t{\n\t\t\t\"type\": \"contracttest\"\n\t\t}\t\n\t]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://api.getpostman.com/apis/{{apiId}}/versions/{{apiVersionId}}/schemas/{{schemaId}}/collections?workspace=c90a3482-f80d-43d6-9dfb-0830f5e43605",
											"protocol": "https",
											"host": [
												"api",
												"getpostman",
												"com"
											],
											"path": [
												"apis",
												"{{apiId}}",
												"versions",
												"{{apiVersionId}}",
												"schemas",
												"{{schemaId}}",
												"collections"
											],
											"query": [
												{
													"key": "workspace",
													"value": "c90a3482-f80d-43d6-9dfb-0830f5e43605"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n    \"collection\": {\n        \"id\": \"e6b0d46a-8722-4f42-ab86-f5f473187ddf\",\n        \"uid\": \"112098-e6b0d46a-8722-4f42-ab86-f5f473187ddf\"\n    },\n    \"relations\": [\n        {\n            \"type\": \"contracttest\",\n            \"id\": \"4b40f06a-5a6a-448f-bfcd-a6dbcb68da22\"\n        }\n    ]\n}"
								}
							]
						},
						{
							"name": "Create Mock",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f122733a-8d10-4fec-8950-32dd4efdbe25",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.environment.set(\"mock-uid\", pm.response.json().mock.uid)",
											"pm.environment.set(\"mock-baseUrl\", pm.response.json().mock.mockUrl)"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "63b25aa8-3683-48c5-81a4-82a0b3150a41",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"mock\": {\n        \"name\": \"Mock Server: {{api-name-from-schema}} | {{api-version-from-schema}}\",\n\t\t\"collection\": \"{{mock-collection-uid}}\",\n\t\t\"environment\": \"{{mock-environment-uid}}\"\n\t}\n}"
								},
								"url": {
									"raw": "https://api.getpostman.com/mocks?workspace={{target-workspace-id}}",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"mocks"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{target-workspace-id}}"
										}
									]
								},
								"description": "This endpoint allows you to create a mock on a collection. You can also provide an environment UID to resolve any environment variables in the collection.\n\nYou can also specify the context of a workspace to create a mock in directly by passing the `workspace` as a query param.\n\n> Requires <a href=\"#authentication\">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter."
							},
							"response": [
								{
									"id": "569b50ef-f09b-4a9c-a3b1-2ed9258f8e7d",
									"name": "Create Mock in a Workspace",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"mock\": {\n    \"collection\": \"1679925-39fee52f-b806-3ffa-1173-00a6f5b183dc\",\n    \"environment\": \"1679925-0b9e9f15-3208-a2b1-22e0-d58392f01524\"\n  }\n}"
										},
										"url": {
											"raw": "https://api.getpostman.com/mocks?workspace={{workspace_id}}",
											"protocol": "https",
											"host": [
												"api",
												"getpostman",
												"com"
											],
											"path": [
												"mocks"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{workspace_id}}",
													"description": "The workspace ID in which the mock will be created"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"name": "Content-Type",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n    \"mock\": {\n        \"id\": \"0fca2246-c108-41f5-8454-cc032def329f\",\n        \"owner\": \"1679925\",\n        \"uid\": \"1679925-0fca2246-c108-41f5-8454-cc032def329f\",\n        \"collection\": \"1679925-39fee52f-b806-3ffa-1173-00a6f5b183dc\",\n        \"environment\": \"1679925-0b9e9f15-3208-a2b1-22e0-d58392f01524\",\n        \"mockUrl\": \"https://0fca2246-c108-41f5-8454-cc032def329f.mock.pstmn.io\"\n    }\n}"
								},
								{
									"id": "76ec6787-54f1-4732-b3b7-e41a5292e955",
									"name": "Successful Response",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"mock\": {\n\t\t\"collection\": \"1679925-39fee52f-b806-3ffa-1173-00a6f5b183dc\",\n\t\t\"environment\": \"1679925-0b9e9f15-3208-a2b1-22e0-d58392f01524\"\n\t}\n}"
										},
										"url": "https://api.getpostman.com/mocks"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"name": "Content-Type",
											"description": {
												"content": "The mime type of this content",
												"type": "text/plain"
											}
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n    \"mock\": {\n        \"id\": \"0fca2246-c108-41f5-8454-cc032def329f\",\n        \"owner\": \"1679925\",\n        \"uid\": \"1679925-0fca2246-c108-41f5-8454-cc032def329f\",\n        \"collection\": \"1679925-39fee52f-b806-3ffa-1173-00a6f5b183dc\",\n        \"environment\": \"1679925-0b9e9f15-3208-a2b1-22e0-d58392f01524\",\n        \"mockUrl\": \"https://0fca2246-c108-41f5-8454-cc032def329f.mock.pstmn.io\"\n    }\n}"
								}
							]
						},
						{
							"name": "Update Environment",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c5e23cf4-1258-4590-8992-3a4bdf36e146",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "00b54224-df70-4e39-8c1b-a92ced4fb3ad",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"environment\": {\n        \"values\": [\n            {\n                \"key\": \"baseUrl\",\n                \"value\": \"{{mock-baseUrl}}\"\n            }\n        ]\n    }\n}"
								},
								"url": "https://api.getpostman.com/environments/{{mock-environment-uid}}",
								"description": "This endpoint replaces an existing environment.\n\nA sample body is added to the request that conforms to the following JSON schema:\n\n```json\n{\n\t\"type\": \"object\",\n\t\"properties\": {\n\t\t\"environment\": {\n\t\t\t\"type\": \"object\",\n\t\t\t\"properties\": {\n\t\t\t\t\"name\": {\n\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\"maxLength\": 254,\n\t\t\t\t\t\"minLength\": 1\n\t\t\t\t},\n\t\t\t\t\"values\": {\n\t\t\t\t\t\"type\": \"array\",\n\t\t\t\t\t\"maxItems\": 100,\n\t\t\t\t\t\"additionalItems\": false,\n\t\t\t\t\t\"items\": {\n\t\t\t\t\t\t\"type\": \"object\",\n\t\t\t\t\t\t\"properties\": {\n\t\t\t\t\t\t\t\"key\": {\n\t\t\t\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\t\t\t\"maxLength\": 254,\n\t\t\t\t\t\t\t\t\"minLength\": 1\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"value\": {\n\t\t\t\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\t\t\t\"maxLength\": 254,\n\t\t\t\t\t\t\t\t\"minLength\": 1\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"type\": {\n\t\t\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"enabled\": {\n\t\t\t\t\t\t\t\t\"type\": \"boolean\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"required\": [\n\t\t\t\t\t\t\t\"key\",\n\t\t\t\t\t\t\t\"value\"\n\t\t\t\t\t\t]\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\t\"required\": [\n\t\t\"environment\"\n\t]\n}\n```\n\nOn successful updation of the environment, the API returns the environment name and `id`.\n\n> Requires <a href=\"#authentication\">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter."
							},
							"response": [
								{
									"id": "01d87cd9-b4c6-45ce-9bdc-07c7e394accd",
									"name": "Failure Response",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"name": "Content-Type",
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"environment\": {\n        \"name\": \"New Name\",\n        \"values\": [\n            null,\n            {\n                \"key\": \"occupation\",\n                \"value\": \"Vigilante\"\n            }\n        ]\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "https://api.getpostman.com/environments/{{environment_uid}}"
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n    \"error\": {\n        \"name\": \"malformedRequestError\",\n        \"message\": \"Invalid type: null (expected object) at environment.values.0\"\n    }\n}"
								},
								{
									"id": "05caba7f-b8d8-4334-a5f1-1b1685f30ccb",
									"name": "Successful Response",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"name": "Content-Type",
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"environment\": {\n        \"name\": \"New Name\",\n        \"values\": [\n            {\n                \"key\": \"name\",\n                \"value\": \"Bruce Wayne\"\n            },\n            {\n                \"key\": \"occupation\",\n                \"value\": \"Vigilante\"\n            }\n        ]\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "https://api.getpostman.com/environments/{{environment_uid}}"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"name": "Content-Type",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n    \"environment\": {\n        \"id\": \"357668d2-84f1-2264-438b-113095359f80\",\n        \"name\": \"New Name\",\n        \"uid\": \"631643-357668d2-84f1-2264-438b-113095359f80\"\n    }\n}"
								}
							]
						},
						{
							"name": "Create Mock Relation",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "db3c907e-4876-4892-b9fa-ec27cd87c6fa",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"postman.setNextRequest(\"Unset Temp Env Vars\")"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "bb1fc61e-a4f5-42a0-923b-83d04536ac06",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"mock\": [\"{{mock-uid}}\"]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "https://api.getpostman.com/apis/{{api-id}}/versions/{{api-version-id}}/relations",
								"description": "This call allows you to add existing Postman entities as new relations to an API. The request body should contain the relations to be created along with an array of entity IDs. \n\n<table>\n  <tr>\n    <th>Relation</th>\n    <th>Entity ID type</th>\n  <tr>\n  <tr>\n    <td>contracttest</td>\n    <td>Collection UIDs</td>\n  </tr>\n  <tr>\n    <td>integrationtest</td>\n    <td>Collection UIDs</td>\n  </tr>\n  <tr>\n    <td>documentation</td>\n    <td>Collection UIDs</td>\n  </tr>\n  <tr>\n    <td>testsuite</td>\n    <td>Collection UIDs</td>\n  </tr>\n  <tr>\n    <td>environment</td>\n    <td>Environment UIDs</td>\n  </tr>\n  <tr>\n    <td>mock</td>\n    <td>Mock IDs</td>\n  </tr>\n  <tr>\n    <td>monitor</td>\n    <td>Monitor IDs</td>\n  </tr>\n</table>\n\n> Requires <a href=\"#authentication\">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter."
							},
							"response": [
								{
									"id": "9e4b3dda-c68b-4868-bb52-ef47614244e4",
									"name": "Create multiple relations from existing collections",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"contracttest\": [\"112098-a173931c-3340-4c14-b30f-ae62e5fbeb52\"],\n\t\"testsuite\": [\"112098-a173931c-3340-4c14-b30f-ae62e5fbeb52\", \"112098-47958a5a-a2a5-4330-9c9d-60c5166115f2\"],\n\t\"documentation\": [\"112098-47958a5a-a2a5-4330-9c9d-60c5166115f2\"]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "https://api.getpostman.com/apis/{{apiId}}/versions/{{apiVersionId}}/relations"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n    \"contracttest\": [\n        \"5bcece87-ca4b-4e75-a967-2a6845626164\"\n    ],\n    \"testsuite\": [\n        \"e525fa71-035e-4620-acda-ce878524f1e7\",\n        \"17a974b2-ce79-4b95-9d3f-217d6ff7e979\"\n    ],\n    \"documentation\": [\n        \"2084eba6-a17b-4751-8f03-ea60f30ba19c\"\n    ]\n}"
								}
							]
						}
					],
					"id": "07c23c3e-d33d-4325-9b90-670d4a4d3432"
				}
			],
			"id": "295e5826-d29d-407a-bd63-e3ff10af59af"
		},
		{
			"name": "Audit",
			"item": [
				{
					"name": "Get all linked relations for API version",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4ec0fc04-b231-457b-9466-d94b1a378a8c",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "b7588e2a-713c-4587-9e1b-83c607ee4efe",
					"request": {
						"method": "GET",
						"header": [],
						"url": "https://api.getpostman.com/apis/{{api-id}}/versions/{{api-version-id}}/relations",
						"description": "This call fetches all the relations which are linked to the specified API version along with their details.\n\nThe response will contain a `relations` object which lists all the relation types which are linked to the API version. Each of the relation type will be an object which details the relations of this type. \n\n> Requires <a href=\"#authentication\">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter."
					},
					"response": [
						{
							"id": "28741776-7140-4206-ba95-2d55a68b6d1a",
							"name": "Get linked relations for an API version",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": "https://api.getpostman.com/apis/{{apiId}}/versions/{{apiVersionId}}/relations"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": {
										"content": "",
										"type": "text/plain"
									}
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n\t\"relations\": {\n\t\t\"contracttest\": {\n            \"2a9b8fa8-88b7-4b86-8372-8e3f6f6e07f2\": {\n                \"id\": \"2a9b8fa8-88b7-4b86-8372-8e3f6f6e07f2\",\n                \"name\": \"C test\",\n                \"updatedAt\": \"2019-08-29T10:18:11.000Z\"\n            }\n        },\n        \"integrationtest\": {\n            \"521b0486-ab91-4d3a-9189-43c9380a0533\": {\n                \"id\": \"521b0486-ab91-4d3a-9189-43c9380a0533\",\n                \"name\": \"C1\",\n                \"updatedAt\": \"2019-08-29T11:40:39.000Z\"\n            },\n            \"a236b715-e682-460b-97b6-c1db24f7612e\": {\n                \"id\": \"a236b715-e682-460b-97b6-c1db24f7612e\",\n                \"name\": \"C test\",\n                \"updatedAt\": \"2019-08-29T10:18:11.000Z\"\n            }\n        },\n        \"mock\": {\n            \"4ccd755f-2c80-481b-a262-49b55e12f5e1\": {\n                \"id\": \"4ccd755f-2c80-481b-a262-49b55e12f5e1\",\n                \"name\": \"Mock\",\n                \"url\": \"https://4ccd755f-2c80-481b-a262-49b55e12f5e1.mock-beta.pstmn.io\",\n                \"updatedAt\": \"2019-08-20T10:18:13.000Z\"\n            }\n        }\n\t}\n}"
						},
						{
							"id": "3f1a3288-873e-4dd7-b800-5e3c3e6d4563",
							"name": "Get linked relations",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": "https://api.getpostman.com/apis/{{apiId}}/versions/{{apiVersionId}}/relations"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Sat, 09 Apr 2022 20:08:32 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Server",
									"value": "nginx"
								},
								{
									"key": "x-frame-options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "x-srv-trace",
									"value": "v=1;t=33dec15f367162e4"
								},
								{
									"key": "x-srv-span",
									"value": "v=1;s=b2843c815db9b10c"
								},
								{
									"key": "X-RateLimit-Limit",
									"value": "300"
								},
								{
									"key": "X-RateLimit-Remaining",
									"value": "298"
								},
								{
									"key": "X-RateLimit-Reset",
									"value": "1649534937"
								},
								{
									"key": "ETag",
									"value": "W/\"5df-HRfQu8nOkNnls3Sj7iTRKglovjM\""
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n    \"relations\": {\n        \"schema\": {\n            \"dfdb7c7e-ab6b-4a92-b34c-b9530240798c\": {\n                \"id\": \"dfdb7c7e-ab6b-4a92-b34c-b9530240798c\"\n            }\n        },\n        \"test\": {\n            \"a50870a4-62c7-4640-9319-bad231bdad47\": {\n                \"id\": \"a50870a4-62c7-4640-9319-bad231bdad47\",\n                \"name\": \"Todo API | Client Smoke Tests | 2.0.0\",\n                \"createdAt\": \"2022-03-07T20:20:08.000Z\",\n                \"updatedAt\": \"2022-03-31T20:12:20.000Z\"\n            }\n        },\n        \"documentation\": {\n            \"9f854265-da74-4e17-a3f0-c53719e49b97\": {\n                \"id\": \"9f854265-da74-4e17-a3f0-c53719e49b97\",\n                \"name\": \"Todo API | Documentation Collection | 2.0.0\",\n                \"createdAt\": \"2022-03-07T19:42:00.000Z\",\n                \"updatedAt\": \"2022-03-31T20:18:20.000Z\"\n            }\n        },\n        \"mock\": {\n            \"58394233-d8f9-4b1d-9752-1f682c4c90b0\": {\n                \"id\": \"58394233-d8f9-4b1d-9752-1f682c4c90b0\",\n                \"name\": \"Todo API Mock Server | 2.0.0\",\n                \"createdAt\": \"2022-03-07T19:59:22.000Z\",\n                \"updatedAt\": \"2022-03-15T20:17:24.000Z\",\n                \"url\": \"https://58394233-d8f9-4b1d-9752-1f682c4c90b0.mock.pstmn.io\"\n            }\n        },\n        \"environment\": {\n            \"15950784-8b5ef94c-f597-4d90-af62-9a07a78cce97\": {\n                \"id\": \"15950784-8b5ef94c-f597-4d90-af62-9a07a78cce97\",\n                \"name\": \"Todo API Mock Env | 2.0.0\",\n                \"createdAt\": \"2022-03-07T20:21:41.000Z\",\n                \"updatedAt\": \"2022-03-15T20:17:13.000Z\"\n            }\n        },\n        \"monitor\": {\n            \"1ec9e503-ed8a-4340-990c-fdad4a361667\": {\n                \"id\": \"1ec9e503-ed8a-4340-990c-fdad4a361667\",\n                \"name\": \"Users Monitor | 2.0.0\",\n                \"createdAt\": \"2022-03-07T19:53:24.000Z\",\n                \"updatedAt\": \"2022-04-05T19:01:51.530Z\"\n            }\n        },\n        \"testsuite\": {\n            \"a50870a4-62c7-4640-9319-bad231bdad47\": {\n                \"id\": \"a50870a4-62c7-4640-9319-bad231bdad47\",\n                \"name\": \"Todo API | Client Smoke Tests | 2.0.0\",\n                \"createdAt\": \"2022-03-07T20:20:08.000Z\",\n                \"updatedAt\": \"2022-03-31T20:12:20.000Z\"\n            }\n        }\n    }\n}"
						}
					]
				},
				{
					"name": "Unset Temp Env Vars",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f92911aa-dcbd-48c3-9a54-77d40e84bbb5",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.environment.unset(\"schema\")",
									"pm.environment.unset(\"api-name-from-schema\")",
									"pm.environment.unset(\"api-version-from-schema\")",
									"pm.environment.unset(\"api-id\")",
									"pm.environment.unset(\"api-version-id\")",
									"pm.environment.unset(\"draft-api-version-id-to-delete\")",
									"pm.environment.unset(\"schema-id\")",
									"pm.environment.unset(\"documentation-entity-id\")",
									"pm.environment.unset(\"documentation-collection-id\")",
									"pm.environment.unset(\"mock-entity-id\")",
									"pm.environment.unset(\"mock-collection-id\")",
									"pm.environment.unset(\"mock-collection-uid\")",
									"pm.environment.unset(\"mock-environment-id\")",
									"pm.environment.unset(\"mock-environment-uid\")",
									"pm.environment.unset(\"mock-uid\")",
									"pm.environment.unset(\"mock-baseUrl\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "c6987ebd-835e-42d1-8e25-ef16e486823a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://postman-echo.com/delete?note=seeTestScript",
							"protocol": "https",
							"host": [
								"postman-echo",
								"com"
							],
							"path": [
								"delete"
							],
							"query": [
								{
									"key": "note",
									"value": "seeTestScript"
								}
							]
						}
					},
					"response": []
				}
			],
			"id": "6a86e0b8-2922-42f5-b293-255f7e3addd6"
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": {
			"value": "{{postman-api-key}}",
			"key": "X-API-Key"
		}
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "ac15f547-5064-4d23-b2af-2f9c05b06aa3",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "cf9dfd2a-a45d-4610-a29b-76c0a87fdef3",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "251ac4c9-1425-49fe-af89-8489d2db13cc",
			"key": "js-to-yaml",
			"value": "\n/*! js-yaml 4.1.0 https://github.com/nodeca/js-yaml @license MIT */\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n  typeof define === 'function' && define.amd ? define(['exports'], factory) :\n  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.jsyaml = {}));\n}(this, (function (exports) { 'use strict';\n\n  function isNothing(subject) {\n    return (typeof subject === 'undefined') || (subject === null);\n  }\n\n\n  function isObject(subject) {\n    return (typeof subject === 'object') && (subject !== null);\n  }\n\n\n  function toArray(sequence) {\n    if (Array.isArray(sequence)) return sequence;\n    else if (isNothing(sequence)) return [];\n\n    return [ sequence ];\n  }\n\n\n  function extend(target, source) {\n    var index, length, key, sourceKeys;\n\n    if (source) {\n      sourceKeys = Object.keys(source);\n\n      for (index = 0, length = sourceKeys.length; index < length; index += 1) {\n        key = sourceKeys[index];\n        target[key] = source[key];\n      }\n    }\n\n    return target;\n  }\n\n\n  function repeat(string, count) {\n    var result = '', cycle;\n\n    for (cycle = 0; cycle < count; cycle += 1) {\n      result += string;\n    }\n\n    return result;\n  }\n\n\n  function isNegativeZero(number) {\n    return (number === 0) && (Number.NEGATIVE_INFINITY === 1 / number);\n  }\n\n\n  var isNothing_1      = isNothing;\n  var isObject_1       = isObject;\n  var toArray_1        = toArray;\n  var repeat_1         = repeat;\n  var isNegativeZero_1 = isNegativeZero;\n  var extend_1         = extend;\n\n  var common = {\n  \tisNothing: isNothing_1,\n  \tisObject: isObject_1,\n  \ttoArray: toArray_1,\n  \trepeat: repeat_1,\n  \tisNegativeZero: isNegativeZero_1,\n  \textend: extend_1\n  };\n\n  // YAML error class. http://stackoverflow.com/questions/8458984\n\n\n  function formatError(exception, compact) {\n    var where = '', message = exception.reason || '(unknown reason)';\n\n    if (!exception.mark) return message;\n\n    if (exception.mark.name) {\n      where += 'in \"' + exception.mark.name + '\" ';\n    }\n\n    where += '(' + (exception.mark.line + 1) + ':' + (exception.mark.column + 1) + ')';\n\n    if (!compact && exception.mark.snippet) {\n      where += '\\n\\n' + exception.mark.snippet;\n    }\n\n    return message + ' ' + where;\n  }\n\n\n  function YAMLException$1(reason, mark) {\n    // Super constructor\n    Error.call(this);\n\n    this.name = 'YAMLException';\n    this.reason = reason;\n    this.mark = mark;\n    this.message = formatError(this, false);\n\n    // Include stack trace in error object\n    if (Error.captureStackTrace) {\n      // Chrome and NodeJS\n      Error.captureStackTrace(this, this.constructor);\n    } else {\n      // FF, IE 10+ and Safari 6+. Fallback for others\n      this.stack = (new Error()).stack || '';\n    }\n  }\n\n\n  // Inherit from Error\n  YAMLException$1.prototype = Object.create(Error.prototype);\n  YAMLException$1.prototype.constructor = YAMLException$1;\n\n\n  YAMLException$1.prototype.toString = function toString(compact) {\n    return this.name + ': ' + formatError(this, compact);\n  };\n\n\n  var exception = YAMLException$1;\n\n  // get snippet for a single line, respecting maxLength\n  function getLine(buffer, lineStart, lineEnd, position, maxLineLength) {\n    var head = '';\n    var tail = '';\n    var maxHalfLength = Math.floor(maxLineLength / 2) - 1;\n\n    if (position - lineStart > maxHalfLength) {\n      head = ' ... ';\n      lineStart = position - maxHalfLength + head.length;\n    }\n\n    if (lineEnd - position > maxHalfLength) {\n      tail = ' ...';\n      lineEnd = position + maxHalfLength - tail.length;\n    }\n\n    return {\n      str: head + buffer.slice(lineStart, lineEnd).replace(/\\t/g, '→') + tail,\n      pos: position - lineStart + head.length // relative position\n    };\n  }\n\n\n  function padStart(string, max) {\n    return common.repeat(' ', max - string.length) + string;\n  }\n\n\n  function makeSnippet(mark, options) {\n    options = Object.create(options || null);\n\n    if (!mark.buffer) return null;\n\n    if (!options.maxLength) options.maxLength = 79;\n    if (typeof options.indent      !== 'number') options.indent      = 1;\n    if (typeof options.linesBefore !== 'number') options.linesBefore = 3;\n    if (typeof options.linesAfter  !== 'number') options.linesAfter  = 2;\n\n    var re = /\\r?\\n|\\r|\\0/g;\n    var lineStarts = [ 0 ];\n    var lineEnds = [];\n    var match;\n    var foundLineNo = -1;\n\n    while ((match = re.exec(mark.buffer))) {\n      lineEnds.push(match.index);\n      lineStarts.push(match.index + match[0].length);\n\n      if (mark.position <= match.index && foundLineNo < 0) {\n        foundLineNo = lineStarts.length - 2;\n      }\n    }\n\n    if (foundLineNo < 0) foundLineNo = lineStarts.length - 1;\n\n    var result = '', i, line;\n    var lineNoLength = Math.min(mark.line + options.linesAfter, lineEnds.length).toString().length;\n    var maxLineLength = options.maxLength - (options.indent + lineNoLength + 3);\n\n    for (i = 1; i <= options.linesBefore; i++) {\n      if (foundLineNo - i < 0) break;\n      line = getLine(\n        mark.buffer,\n        lineStarts[foundLineNo - i],\n        lineEnds[foundLineNo - i],\n        mark.position - (lineStarts[foundLineNo] - lineStarts[foundLineNo - i]),\n        maxLineLength\n      );\n      result = common.repeat(' ', options.indent) + padStart((mark.line - i + 1).toString(), lineNoLength) +\n        ' | ' + line.str + '\\n' + result;\n    }\n\n    line = getLine(mark.buffer, lineStarts[foundLineNo], lineEnds[foundLineNo], mark.position, maxLineLength);\n    result += common.repeat(' ', options.indent) + padStart((mark.line + 1).toString(), lineNoLength) +\n      ' | ' + line.str + '\\n';\n    result += common.repeat('-', options.indent + lineNoLength + 3 + line.pos) + '^' + '\\n';\n\n    for (i = 1; i <= options.linesAfter; i++) {\n      if (foundLineNo + i >= lineEnds.length) break;\n      line = getLine(\n        mark.buffer,\n        lineStarts[foundLineNo + i],\n        lineEnds[foundLineNo + i],\n        mark.position - (lineStarts[foundLineNo] - lineStarts[foundLineNo + i]),\n        maxLineLength\n      );\n      result += common.repeat(' ', options.indent) + padStart((mark.line + i + 1).toString(), lineNoLength) +\n        ' | ' + line.str + '\\n';\n    }\n\n    return result.replace(/\\n$/, '');\n  }\n\n\n  var snippet = makeSnippet;\n\n  var TYPE_CONSTRUCTOR_OPTIONS = [\n    'kind',\n    'multi',\n    'resolve',\n    'construct',\n    'instanceOf',\n    'predicate',\n    'represent',\n    'representName',\n    'defaultStyle',\n    'styleAliases'\n  ];\n\n  var YAML_NODE_KINDS = [\n    'scalar',\n    'sequence',\n    'mapping'\n  ];\n\n  function compileStyleAliases(map) {\n    var result = {};\n\n    if (map !== null) {\n      Object.keys(map).forEach(function (style) {\n        map[style].forEach(function (alias) {\n          result[String(alias)] = style;\n        });\n      });\n    }\n\n    return result;\n  }\n\n  function Type$1(tag, options) {\n    options = options || {};\n\n    Object.keys(options).forEach(function (name) {\n      if (TYPE_CONSTRUCTOR_OPTIONS.indexOf(name) === -1) {\n        throw new exception('Unknown option \"' + name + '\" is met in definition of \"' + tag + '\" YAML type.');\n      }\n    });\n\n    // TODO: Add tag format check.\n    this.options       = options; // keep original options in case user wants to extend this type later\n    this.tag           = tag;\n    this.kind          = options['kind']          || null;\n    this.resolve       = options['resolve']       || function () { return true; };\n    this.construct     = options['construct']     || function (data) { return data; };\n    this.instanceOf    = options['instanceOf']    || null;\n    this.predicate     = options['predicate']     || null;\n    this.represent     = options['represent']     || null;\n    this.representName = options['representName'] || null;\n    this.defaultStyle  = options['defaultStyle']  || null;\n    this.multi         = options['multi']         || false;\n    this.styleAliases  = compileStyleAliases(options['styleAliases'] || null);\n\n    if (YAML_NODE_KINDS.indexOf(this.kind) === -1) {\n      throw new exception('Unknown kind \"' + this.kind + '\" is specified for \"' + tag + '\" YAML type.');\n    }\n  }\n\n  var type = Type$1;\n\n  /*eslint-disable max-len*/\n\n\n\n\n\n  function compileList(schema, name) {\n    var result = [];\n\n    schema[name].forEach(function (currentType) {\n      var newIndex = result.length;\n\n      result.forEach(function (previousType, previousIndex) {\n        if (previousType.tag === currentType.tag &&\n            previousType.kind === currentType.kind &&\n            previousType.multi === currentType.multi) {\n\n          newIndex = previousIndex;\n        }\n      });\n\n      result[newIndex] = currentType;\n    });\n\n    return result;\n  }\n\n\n  function compileMap(/* lists... */) {\n    var result = {\n          scalar: {},\n          sequence: {},\n          mapping: {},\n          fallback: {},\n          multi: {\n            scalar: [],\n            sequence: [],\n            mapping: [],\n            fallback: []\n          }\n        }, index, length;\n\n    function collectType(type) {\n      if (type.multi) {\n        result.multi[type.kind].push(type);\n        result.multi['fallback'].push(type);\n      } else {\n        result[type.kind][type.tag] = result['fallback'][type.tag] = type;\n      }\n    }\n\n    for (index = 0, length = arguments.length; index < length; index += 1) {\n      arguments[index].forEach(collectType);\n    }\n    return result;\n  }\n\n\n  function Schema$1(definition) {\n    return this.extend(definition);\n  }\n\n\n  Schema$1.prototype.extend = function extend(definition) {\n    var implicit = [];\n    var explicit = [];\n\n    if (definition instanceof type) {\n      // Schema.extend(type)\n      explicit.push(definition);\n\n    } else if (Array.isArray(definition)) {\n      // Schema.extend([ type1, type2, ... ])\n      explicit = explicit.concat(definition);\n\n    } else if (definition && (Array.isArray(definition.implicit) || Array.isArray(definition.explicit))) {\n      // Schema.extend({ explicit: [ type1, type2, ... ], implicit: [ type1, type2, ... ] })\n      if (definition.implicit) implicit = implicit.concat(definition.implicit);\n      if (definition.explicit) explicit = explicit.concat(definition.explicit);\n\n    } else {\n      throw new exception('Schema.extend argument should be a Type, [ Type ], ' +\n        'or a schema definition ({ implicit: [...], explicit: [...] })');\n    }\n\n    implicit.forEach(function (type$1) {\n      if (!(type$1 instanceof type)) {\n        throw new exception('Specified list of YAML types (or a single Type object) contains a non-Type object.');\n      }\n\n      if (type$1.loadKind && type$1.loadKind !== 'scalar') {\n        throw new exception('There is a non-scalar type in the implicit list of a schema. Implicit resolving of such types is not supported.');\n      }\n\n      if (type$1.multi) {\n        throw new exception('There is a multi type in the implicit list of a schema. Multi tags can only be listed as explicit.');\n      }\n    });\n\n    explicit.forEach(function (type$1) {\n      if (!(type$1 instanceof type)) {\n        throw new exception('Specified list of YAML types (or a single Type object) contains a non-Type object.');\n      }\n    });\n\n    var result = Object.create(Schema$1.prototype);\n\n    result.implicit = (this.implicit || []).concat(implicit);\n    result.explicit = (this.explicit || []).concat(explicit);\n\n    result.compiledImplicit = compileList(result, 'implicit');\n    result.compiledExplicit = compileList(result, 'explicit');\n    result.compiledTypeMap  = compileMap(result.compiledImplicit, result.compiledExplicit);\n\n    return result;\n  };\n\n\n  var schema = Schema$1;\n\n  var str = new type('tag:yaml.org,2002:str', {\n    kind: 'scalar',\n    construct: function (data) { return data !== null ? data : ''; }\n  });\n\n  var seq = new type('tag:yaml.org,2002:seq', {\n    kind: 'sequence',\n    construct: function (data) { return data !== null ? data : []; }\n  });\n\n  var map = new type('tag:yaml.org,2002:map', {\n    kind: 'mapping',\n    construct: function (data) { return data !== null ? data : {}; }\n  });\n\n  var failsafe = new schema({\n    explicit: [\n      str,\n      seq,\n      map\n    ]\n  });\n\n  function resolveYamlNull(data) {\n    if (data === null) return true;\n\n    var max = data.length;\n\n    return (max === 1 && data === '~') ||\n           (max === 4 && (data === 'null' || data === 'Null' || data === 'NULL'));\n  }\n\n  function constructYamlNull() {\n    return null;\n  }\n\n  function isNull(object) {\n    return object === null;\n  }\n\n  var _null = new type('tag:yaml.org,2002:null', {\n    kind: 'scalar',\n    resolve: resolveYamlNull,\n    construct: constructYamlNull,\n    predicate: isNull,\n    represent: {\n      canonical: function () { return '~';    },\n      lowercase: function () { return 'null'; },\n      uppercase: function () { return 'NULL'; },\n      camelcase: function () { return 'Null'; },\n      empty:     function () { return '';     }\n    },\n    defaultStyle: 'lowercase'\n  });\n\n  function resolveYamlBoolean(data) {\n    if (data === null) return false;\n\n    var max = data.length;\n\n    return (max === 4 && (data === 'true' || data === 'True' || data === 'TRUE')) ||\n           (max === 5 && (data === 'false' || data === 'False' || data === 'FALSE'));\n  }\n\n  function constructYamlBoolean(data) {\n    return data === 'true' ||\n           data === 'True' ||\n           data === 'TRUE';\n  }\n\n  function isBoolean(object) {\n    return Object.prototype.toString.call(object) === '[object Boolean]';\n  }\n\n  var bool = new type('tag:yaml.org,2002:bool', {\n    kind: 'scalar',\n    resolve: resolveYamlBoolean,\n    construct: constructYamlBoolean,\n    predicate: isBoolean,\n    represent: {\n      lowercase: function (object) { return object ? 'true' : 'false'; },\n      uppercase: function (object) { return object ? 'TRUE' : 'FALSE'; },\n      camelcase: function (object) { return object ? 'True' : 'False'; }\n    },\n    defaultStyle: 'lowercase'\n  });\n\n  function isHexCode(c) {\n    return ((0x30/* 0 */ <= c) && (c <= 0x39/* 9 */)) ||\n           ((0x41/* A */ <= c) && (c <= 0x46/* F */)) ||\n           ((0x61/* a */ <= c) && (c <= 0x66/* f */));\n  }\n\n  function isOctCode(c) {\n    return ((0x30/* 0 */ <= c) && (c <= 0x37/* 7 */));\n  }\n\n  function isDecCode(c) {\n    return ((0x30/* 0 */ <= c) && (c <= 0x39/* 9 */));\n  }\n\n  function resolveYamlInteger(data) {\n    if (data === null) return false;\n\n    var max = data.length,\n        index = 0,\n        hasDigits = false,\n        ch;\n\n    if (!max) return false;\n\n    ch = data[index];\n\n    // sign\n    if (ch === '-' || ch === '+') {\n      ch = data[++index];\n    }\n\n    if (ch === '0') {\n      // 0\n      if (index + 1 === max) return true;\n      ch = data[++index];\n\n      // base 2, base 8, base 16\n\n      if (ch === 'b') {\n        // base 2\n        index++;\n\n        for (; index < max; index++) {\n          ch = data[index];\n          if (ch === '_') continue;\n          if (ch !== '0' && ch !== '1') return false;\n          hasDigits = true;\n        }\n        return hasDigits && ch !== '_';\n      }\n\n\n      if (ch === 'x') {\n        // base 16\n        index++;\n\n        for (; index < max; index++) {\n          ch = data[index];\n          if (ch === '_') continue;\n          if (!isHexCode(data.charCodeAt(index))) return false;\n          hasDigits = true;\n        }\n        return hasDigits && ch !== '_';\n      }\n\n\n      if (ch === 'o') {\n        // base 8\n        index++;\n\n        for (; index < max; index++) {\n          ch = data[index];\n          if (ch === '_') continue;\n          if (!isOctCode(data.charCodeAt(index))) return false;\n          hasDigits = true;\n        }\n        return hasDigits && ch !== '_';\n      }\n    }\n\n    // base 10 (except 0)\n\n    // value should not start with `_`;\n    if (ch === '_') return false;\n\n    for (; index < max; index++) {\n      ch = data[index];\n      if (ch === '_') continue;\n      if (!isDecCode(data.charCodeAt(index))) {\n        return false;\n      }\n      hasDigits = true;\n    }\n\n    // Should have digits and should not end with `_`\n    if (!hasDigits || ch === '_') return false;\n\n    return true;\n  }\n\n  function constructYamlInteger(data) {\n    var value = data, sign = 1, ch;\n\n    if (value.indexOf('_') !== -1) {\n      value = value.replace(/_/g, '');\n    }\n\n    ch = value[0];\n\n    if (ch === '-' || ch === '+') {\n      if (ch === '-') sign = -1;\n      value = value.slice(1);\n      ch = value[0];\n    }\n\n    if (value === '0') return 0;\n\n    if (ch === '0') {\n      if (value[1] === 'b') return sign * parseInt(value.slice(2), 2);\n      if (value[1] === 'x') return sign * parseInt(value.slice(2), 16);\n      if (value[1] === 'o') return sign * parseInt(value.slice(2), 8);\n    }\n\n    return sign * parseInt(value, 10);\n  }\n\n  function isInteger(object) {\n    return (Object.prototype.toString.call(object)) === '[object Number]' &&\n           (object % 1 === 0 && !common.isNegativeZero(object));\n  }\n\n  var int = new type('tag:yaml.org,2002:int', {\n    kind: 'scalar',\n    resolve: resolveYamlInteger,\n    construct: constructYamlInteger,\n    predicate: isInteger,\n    represent: {\n      binary:      function (obj) { return obj >= 0 ? '0b' + obj.toString(2) : '-0b' + obj.toString(2).slice(1); },\n      octal:       function (obj) { return obj >= 0 ? '0o'  + obj.toString(8) : '-0o'  + obj.toString(8).slice(1); },\n      decimal:     function (obj) { return obj.toString(10); },\n      /* eslint-disable max-len */\n      hexadecimal: function (obj) { return obj >= 0 ? '0x' + obj.toString(16).toUpperCase() :  '-0x' + obj.toString(16).toUpperCase().slice(1); }\n    },\n    defaultStyle: 'decimal',\n    styleAliases: {\n      binary:      [ 2,  'bin' ],\n      octal:       [ 8,  'oct' ],\n      decimal:     [ 10, 'dec' ],\n      hexadecimal: [ 16, 'hex' ]\n    }\n  });\n\n  var YAML_FLOAT_PATTERN = new RegExp(\n    // 2.5e4, 2.5 and integers\n    '^(?:[-+]?(?:[0-9][0-9_]*)(?:\\\\.[0-9_]*)?(?:[eE][-+]?[0-9]+)?' +\n    // .2e4, .2\n    // special case, seems not from spec\n    '|\\\\.[0-9_]+(?:[eE][-+]?[0-9]+)?' +\n    // .inf\n    '|[-+]?\\\\.(?:inf|Inf|INF)' +\n    // .nan\n    '|\\\\.(?:nan|NaN|NAN))$');\n\n  function resolveYamlFloat(data) {\n    if (data === null) return false;\n\n    if (!YAML_FLOAT_PATTERN.test(data) ||\n        // Quick hack to not allow integers end with `_`\n        // Probably should update regexp & check speed\n        data[data.length - 1] === '_') {\n      return false;\n    }\n\n    return true;\n  }\n\n  function constructYamlFloat(data) {\n    var value, sign;\n\n    value  = data.replace(/_/g, '').toLowerCase();\n    sign   = value[0] === '-' ? -1 : 1;\n\n    if ('+-'.indexOf(value[0]) >= 0) {\n      value = value.slice(1);\n    }\n\n    if (value === '.inf') {\n      return (sign === 1) ? Number.POSITIVE_INFINITY : Number.NEGATIVE_INFINITY;\n\n    } else if (value === '.nan') {\n      return NaN;\n    }\n    return sign * parseFloat(value, 10);\n  }\n\n\n  var SCIENTIFIC_WITHOUT_DOT = /^[-+]?[0-9]+e/;\n\n  function representYamlFloat(object, style) {\n    var res;\n\n    if (isNaN(object)) {\n      switch (style) {\n        case 'lowercase': return '.nan';\n        case 'uppercase': return '.NAN';\n        case 'camelcase': return '.NaN';\n      }\n    } else if (Number.POSITIVE_INFINITY === object) {\n      switch (style) {\n        case 'lowercase': return '.inf';\n        case 'uppercase': return '.INF';\n        case 'camelcase': return '.Inf';\n      }\n    } else if (Number.NEGATIVE_INFINITY === object) {\n      switch (style) {\n        case 'lowercase': return '-.inf';\n        case 'uppercase': return '-.INF';\n        case 'camelcase': return '-.Inf';\n      }\n    } else if (common.isNegativeZero(object)) {\n      return '-0.0';\n    }\n\n    res = object.toString(10);\n\n    // JS stringifier can build scientific format without dots: 5e-100,\n    // while YAML requres dot: 5.e-100. Fix it with simple hack\n\n    return SCIENTIFIC_WITHOUT_DOT.test(res) ? res.replace('e', '.e') : res;\n  }\n\n  function isFloat(object) {\n    return (Object.prototype.toString.call(object) === '[object Number]') &&\n           (object % 1 !== 0 || common.isNegativeZero(object));\n  }\n\n  var float = new type('tag:yaml.org,2002:float', {\n    kind: 'scalar',\n    resolve: resolveYamlFloat,\n    construct: constructYamlFloat,\n    predicate: isFloat,\n    represent: representYamlFloat,\n    defaultStyle: 'lowercase'\n  });\n\n  var json = failsafe.extend({\n    implicit: [\n      _null,\n      bool,\n      int,\n      float\n    ]\n  });\n\n  var core = json;\n\n  var YAML_DATE_REGEXP = new RegExp(\n    '^([0-9][0-9][0-9][0-9])'          + // [1] year\n    '-([0-9][0-9])'                    + // [2] month\n    '-([0-9][0-9])$');                   // [3] day\n\n  var YAML_TIMESTAMP_REGEXP = new RegExp(\n    '^([0-9][0-9][0-9][0-9])'          + // [1] year\n    '-([0-9][0-9]?)'                   + // [2] month\n    '-([0-9][0-9]?)'                   + // [3] day\n    '(?:[Tt]|[ \\\\t]+)'                 + // ...\n    '([0-9][0-9]?)'                    + // [4] hour\n    ':([0-9][0-9])'                    + // [5] minute\n    ':([0-9][0-9])'                    + // [6] second\n    '(?:\\\\.([0-9]*))?'                 + // [7] fraction\n    '(?:[ \\\\t]*(Z|([-+])([0-9][0-9]?)' + // [8] tz [9] tz_sign [10] tz_hour\n    '(?::([0-9][0-9]))?))?$');           // [11] tz_minute\n\n  function resolveYamlTimestamp(data) {\n    if (data === null) return false;\n    if (YAML_DATE_REGEXP.exec(data) !== null) return true;\n    if (YAML_TIMESTAMP_REGEXP.exec(data) !== null) return true;\n    return false;\n  }\n\n  function constructYamlTimestamp(data) {\n    var match, year, month, day, hour, minute, second, fraction = 0,\n        delta = null, tz_hour, tz_minute, date;\n\n    match = YAML_DATE_REGEXP.exec(data);\n    if (match === null) match = YAML_TIMESTAMP_REGEXP.exec(data);\n\n    if (match === null) throw new Error('Date resolve error');\n\n    // match: [1] year [2] month [3] day\n\n    year = +(match[1]);\n    month = +(match[2]) - 1; // JS month starts with 0\n    day = +(match[3]);\n\n    if (!match[4]) { // no hour\n      return new Date(Date.UTC(year, month, day));\n    }\n\n    // match: [4] hour [5] minute [6] second [7] fraction\n\n    hour = +(match[4]);\n    minute = +(match[5]);\n    second = +(match[6]);\n\n    if (match[7]) {\n      fraction = match[7].slice(0, 3);\n      while (fraction.length < 3) { // milli-seconds\n        fraction += '0';\n      }\n      fraction = +fraction;\n    }\n\n    // match: [8] tz [9] tz_sign [10] tz_hour [11] tz_minute\n\n    if (match[9]) {\n      tz_hour = +(match[10]);\n      tz_minute = +(match[11] || 0);\n      delta = (tz_hour * 60 + tz_minute) * 60000; // delta in mili-seconds\n      if (match[9] === '-') delta = -delta;\n    }\n\n    date = new Date(Date.UTC(year, month, day, hour, minute, second, fraction));\n\n    if (delta) date.setTime(date.getTime() - delta);\n\n    return date;\n  }\n\n  function representYamlTimestamp(object /*, style*/) {\n    return object.toISOString();\n  }\n\n  var timestamp = new type('tag:yaml.org,2002:timestamp', {\n    kind: 'scalar',\n    resolve: resolveYamlTimestamp,\n    construct: constructYamlTimestamp,\n    instanceOf: Date,\n    represent: representYamlTimestamp\n  });\n\n  function resolveYamlMerge(data) {\n    return data === '<<' || data === null;\n  }\n\n  var merge = new type('tag:yaml.org,2002:merge', {\n    kind: 'scalar',\n    resolve: resolveYamlMerge\n  });\n\n  /*eslint-disable no-bitwise*/\n\n\n\n\n\n  // [ 64, 65, 66 ] -> [ padding, CR, LF ]\n  var BASE64_MAP = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\\n\\r';\n\n\n  function resolveYamlBinary(data) {\n    if (data === null) return false;\n\n    var code, idx, bitlen = 0, max = data.length, map = BASE64_MAP;\n\n    // Convert one by one.\n    for (idx = 0; idx < max; idx++) {\n      code = map.indexOf(data.charAt(idx));\n\n      // Skip CR/LF\n      if (code > 64) continue;\n\n      // Fail on illegal characters\n      if (code < 0) return false;\n\n      bitlen += 6;\n    }\n\n    // If there are any bits left, source was corrupted\n    return (bitlen % 8) === 0;\n  }\n\n  function constructYamlBinary(data) {\n    var idx, tailbits,\n        input = data.replace(/[\\r\\n=]/g, ''), // remove CR/LF & padding to simplify scan\n        max = input.length,\n        map = BASE64_MAP,\n        bits = 0,\n        result = [];\n\n    // Collect by 6*4 bits (3 bytes)\n\n    for (idx = 0; idx < max; idx++) {\n      if ((idx % 4 === 0) && idx) {\n        result.push((bits >> 16) & 0xFF);\n        result.push((bits >> 8) & 0xFF);\n        result.push(bits & 0xFF);\n      }\n\n      bits = (bits << 6) | map.indexOf(input.charAt(idx));\n    }\n\n    // Dump tail\n\n    tailbits = (max % 4) * 6;\n\n    if (tailbits === 0) {\n      result.push((bits >> 16) & 0xFF);\n      result.push((bits >> 8) & 0xFF);\n      result.push(bits & 0xFF);\n    } else if (tailbits === 18) {\n      result.push((bits >> 10) & 0xFF);\n      result.push((bits >> 2) & 0xFF);\n    } else if (tailbits === 12) {\n      result.push((bits >> 4) & 0xFF);\n    }\n\n    return new Uint8Array(result);\n  }\n\n  function representYamlBinary(object /*, style*/) {\n    var result = '', bits = 0, idx, tail,\n        max = object.length,\n        map = BASE64_MAP;\n\n    // Convert every three bytes to 4 ASCII characters.\n\n    for (idx = 0; idx < max; idx++) {\n      if ((idx % 3 === 0) && idx) {\n        result += map[(bits >> 18) & 0x3F];\n        result += map[(bits >> 12) & 0x3F];\n        result += map[(bits >> 6) & 0x3F];\n        result += map[bits & 0x3F];\n      }\n\n      bits = (bits << 8) + object[idx];\n    }\n\n    // Dump tail\n\n    tail = max % 3;\n\n    if (tail === 0) {\n      result += map[(bits >> 18) & 0x3F];\n      result += map[(bits >> 12) & 0x3F];\n      result += map[(bits >> 6) & 0x3F];\n      result += map[bits & 0x3F];\n    } else if (tail === 2) {\n      result += map[(bits >> 10) & 0x3F];\n      result += map[(bits >> 4) & 0x3F];\n      result += map[(bits << 2) & 0x3F];\n      result += map[64];\n    } else if (tail === 1) {\n      result += map[(bits >> 2) & 0x3F];\n      result += map[(bits << 4) & 0x3F];\n      result += map[64];\n      result += map[64];\n    }\n\n    return result;\n  }\n\n  function isBinary(obj) {\n    return Object.prototype.toString.call(obj) ===  '[object Uint8Array]';\n  }\n\n  var binary = new type('tag:yaml.org,2002:binary', {\n    kind: 'scalar',\n    resolve: resolveYamlBinary,\n    construct: constructYamlBinary,\n    predicate: isBinary,\n    represent: representYamlBinary\n  });\n\n  var _hasOwnProperty$3 = Object.prototype.hasOwnProperty;\n  var _toString$2       = Object.prototype.toString;\n\n  function resolveYamlOmap(data) {\n    if (data === null) return true;\n\n    var objectKeys = [], index, length, pair, pairKey, pairHasKey,\n        object = data;\n\n    for (index = 0, length = object.length; index < length; index += 1) {\n      pair = object[index];\n      pairHasKey = false;\n\n      if (_toString$2.call(pair) !== '[object Object]') return false;\n\n      for (pairKey in pair) {\n        if (_hasOwnProperty$3.call(pair, pairKey)) {\n          if (!pairHasKey) pairHasKey = true;\n          else return false;\n        }\n      }\n\n      if (!pairHasKey) return false;\n\n      if (objectKeys.indexOf(pairKey) === -1) objectKeys.push(pairKey);\n      else return false;\n    }\n\n    return true;\n  }\n\n  function constructYamlOmap(data) {\n    return data !== null ? data : [];\n  }\n\n  var omap = new type('tag:yaml.org,2002:omap', {\n    kind: 'sequence',\n    resolve: resolveYamlOmap,\n    construct: constructYamlOmap\n  });\n\n  var _toString$1 = Object.prototype.toString;\n\n  function resolveYamlPairs(data) {\n    if (data === null) return true;\n\n    var index, length, pair, keys, result,\n        object = data;\n\n    result = new Array(object.length);\n\n    for (index = 0, length = object.length; index < length; index += 1) {\n      pair = object[index];\n\n      if (_toString$1.call(pair) !== '[object Object]') return false;\n\n      keys = Object.keys(pair);\n\n      if (keys.length !== 1) return false;\n\n      result[index] = [ keys[0], pair[keys[0]] ];\n    }\n\n    return true;\n  }\n\n  function constructYamlPairs(data) {\n    if (data === null) return [];\n\n    var index, length, pair, keys, result,\n        object = data;\n\n    result = new Array(object.length);\n\n    for (index = 0, length = object.length; index < length; index += 1) {\n      pair = object[index];\n\n      keys = Object.keys(pair);\n\n      result[index] = [ keys[0], pair[keys[0]] ];\n    }\n\n    return result;\n  }\n\n  var pairs = new type('tag:yaml.org,2002:pairs', {\n    kind: 'sequence',\n    resolve: resolveYamlPairs,\n    construct: constructYamlPairs\n  });\n\n  var _hasOwnProperty$2 = Object.prototype.hasOwnProperty;\n\n  function resolveYamlSet(data) {\n    if (data === null) return true;\n\n    var key, object = data;\n\n    for (key in object) {\n      if (_hasOwnProperty$2.call(object, key)) {\n        if (object[key] !== null) return false;\n      }\n    }\n\n    return true;\n  }\n\n  function constructYamlSet(data) {\n    return data !== null ? data : {};\n  }\n\n  var set = new type('tag:yaml.org,2002:set', {\n    kind: 'mapping',\n    resolve: resolveYamlSet,\n    construct: constructYamlSet\n  });\n\n  var _default = core.extend({\n    implicit: [\n      timestamp,\n      merge\n    ],\n    explicit: [\n      binary,\n      omap,\n      pairs,\n      set\n    ]\n  });\n\n  /*eslint-disable max-len,no-use-before-define*/\n\n\n\n\n\n\n\n  var _hasOwnProperty$1 = Object.prototype.hasOwnProperty;\n\n\n  var CONTEXT_FLOW_IN   = 1;\n  var CONTEXT_FLOW_OUT  = 2;\n  var CONTEXT_BLOCK_IN  = 3;\n  var CONTEXT_BLOCK_OUT = 4;\n\n\n  var CHOMPING_CLIP  = 1;\n  var CHOMPING_STRIP = 2;\n  var CHOMPING_KEEP  = 3;\n\n\n  var PATTERN_NON_PRINTABLE         = /[\\x00-\\x08\\x0B\\x0C\\x0E-\\x1F\\x7F-\\x84\\x86-\\x9F\\uFFFE\\uFFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF]/;\n  var PATTERN_NON_ASCII_LINE_BREAKS = /[\\x85\\u2028\\u2029]/;\n  var PATTERN_FLOW_INDICATORS       = /[,\\[\\]\\{\\}]/;\n  var PATTERN_TAG_HANDLE            = /^(?:!|!!|![a-z\\-]+!)$/i;\n  var PATTERN_TAG_URI               = /^(?:!|[^,\\[\\]\\{\\}])(?:%[0-9a-f]{2}|[0-9a-z\\-#;\\/\\?:@&=\\+\\$,_\\.!~\\*'\\(\\)\\[\\]])*$/i;\n\n\n  function _class(obj) { return Object.prototype.toString.call(obj); }\n\n  function is_EOL(c) {\n    return (c === 0x0A/* LF */) || (c === 0x0D/* CR */);\n  }\n\n  function is_WHITE_SPACE(c) {\n    return (c === 0x09/* Tab */) || (c === 0x20/* Space */);\n  }\n\n  function is_WS_OR_EOL(c) {\n    return (c === 0x09/* Tab */) ||\n           (c === 0x20/* Space */) ||\n           (c === 0x0A/* LF */) ||\n           (c === 0x0D/* CR */);\n  }\n\n  function is_FLOW_INDICATOR(c) {\n    return c === 0x2C/* , */ ||\n           c === 0x5B/* [ */ ||\n           c === 0x5D/* ] */ ||\n           c === 0x7B/* { */ ||\n           c === 0x7D/* } */;\n  }\n\n  function fromHexCode(c) {\n    var lc;\n\n    if ((0x30/* 0 */ <= c) && (c <= 0x39/* 9 */)) {\n      return c - 0x30;\n    }\n\n    /*eslint-disable no-bitwise*/\n    lc = c | 0x20;\n\n    if ((0x61/* a */ <= lc) && (lc <= 0x66/* f */)) {\n      return lc - 0x61 + 10;\n    }\n\n    return -1;\n  }\n\n  function escapedHexLen(c) {\n    if (c === 0x78/* x */) { return 2; }\n    if (c === 0x75/* u */) { return 4; }\n    if (c === 0x55/* U */) { return 8; }\n    return 0;\n  }\n\n  function fromDecimalCode(c) {\n    if ((0x30/* 0 */ <= c) && (c <= 0x39/* 9 */)) {\n      return c - 0x30;\n    }\n\n    return -1;\n  }\n\n  function simpleEscapeSequence(c) {\n    /* eslint-disable indent */\n    return (c === 0x30/* 0 */) ? '\\x00' :\n          (c === 0x61/* a */) ? '\\x07' :\n          (c === 0x62/* b */) ? '\\x08' :\n          (c === 0x74/* t */) ? '\\x09' :\n          (c === 0x09/* Tab */) ? '\\x09' :\n          (c === 0x6E/* n */) ? '\\x0A' :\n          (c === 0x76/* v */) ? '\\x0B' :\n          (c === 0x66/* f */) ? '\\x0C' :\n          (c === 0x72/* r */) ? '\\x0D' :\n          (c === 0x65/* e */) ? '\\x1B' :\n          (c === 0x20/* Space */) ? ' ' :\n          (c === 0x22/* \" */) ? '\\x22' :\n          (c === 0x2F/* / */) ? '/' :\n          (c === 0x5C/* \\ */) ? '\\x5C' :\n          (c === 0x4E/* N */) ? '\\x85' :\n          (c === 0x5F/* _ */) ? '\\xA0' :\n          (c === 0x4C/* L */) ? '\\u2028' :\n          (c === 0x50/* P */) ? '\\u2029' : '';\n  }\n\n  function charFromCodepoint(c) {\n    if (c <= 0xFFFF) {\n      return String.fromCharCode(c);\n    }\n    // Encode UTF-16 surrogate pair\n    // https://en.wikipedia.org/wiki/UTF-16#Code_points_U.2B010000_to_U.2B10FFFF\n    return String.fromCharCode(\n      ((c - 0x010000) >> 10) + 0xD800,\n      ((c - 0x010000) & 0x03FF) + 0xDC00\n    );\n  }\n\n  var simpleEscapeCheck = new Array(256); // integer, for fast access\n  var simpleEscapeMap = new Array(256);\n  for (var i = 0; i < 256; i++) {\n    simpleEscapeCheck[i] = simpleEscapeSequence(i) ? 1 : 0;\n    simpleEscapeMap[i] = simpleEscapeSequence(i);\n  }\n\n\n  function State$1(input, options) {\n    this.input = input;\n\n    this.filename  = options['filename']  || null;\n    this.schema    = options['schema']    || _default;\n    this.onWarning = options['onWarning'] || null;\n    // (Hidden) Remove? makes the loader to expect YAML 1.1 documents\n    // if such documents have no explicit %YAML directive\n    this.legacy    = options['legacy']    || false;\n\n    this.json      = options['json']      || false;\n    this.listener  = options['listener']  || null;\n\n    this.implicitTypes = this.schema.compiledImplicit;\n    this.typeMap       = this.schema.compiledTypeMap;\n\n    this.length     = input.length;\n    this.position   = 0;\n    this.line       = 0;\n    this.lineStart  = 0;\n    this.lineIndent = 0;\n\n    // position of first leading tab in the current line,\n    // used to make sure there are no tabs in the indentation\n    this.firstTabInLine = -1;\n\n    this.documents = [];\n\n    /*\n    this.version;\n    this.checkLineBreaks;\n    this.tagMap;\n    this.anchorMap;\n    this.tag;\n    this.anchor;\n    this.kind;\n    this.result;*/\n\n  }\n\n\n  function generateError(state, message) {\n    var mark = {\n      name:     state.filename,\n      buffer:   state.input.slice(0, -1), // omit trailing \\0\n      position: state.position,\n      line:     state.line,\n      column:   state.position - state.lineStart\n    };\n\n    mark.snippet = snippet(mark);\n\n    return new exception(message, mark);\n  }\n\n  function throwError(state, message) {\n    throw generateError(state, message);\n  }\n\n  function throwWarning(state, message) {\n    if (state.onWarning) {\n      state.onWarning.call(null, generateError(state, message));\n    }\n  }\n\n\n  var directiveHandlers = {\n\n    YAML: function handleYamlDirective(state, name, args) {\n\n      var match, major, minor;\n\n      if (state.version !== null) {\n        throwError(state, 'duplication of %YAML directive');\n      }\n\n      if (args.length !== 1) {\n        throwError(state, 'YAML directive accepts exactly one argument');\n      }\n\n      match = /^([0-9]+)\\.([0-9]+)$/.exec(args[0]);\n\n      if (match === null) {\n        throwError(state, 'ill-formed argument of the YAML directive');\n      }\n\n      major = parseInt(match[1], 10);\n      minor = parseInt(match[2], 10);\n\n      if (major !== 1) {\n        throwError(state, 'unacceptable YAML version of the document');\n      }\n\n      state.version = args[0];\n      state.checkLineBreaks = (minor < 2);\n\n      if (minor !== 1 && minor !== 2) {\n        throwWarning(state, 'unsupported YAML version of the document');\n      }\n    },\n\n    TAG: function handleTagDirective(state, name, args) {\n\n      var handle, prefix;\n\n      if (args.length !== 2) {\n        throwError(state, 'TAG directive accepts exactly two arguments');\n      }\n\n      handle = args[0];\n      prefix = args[1];\n\n      if (!PATTERN_TAG_HANDLE.test(handle)) {\n        throwError(state, 'ill-formed tag handle (first argument) of the TAG directive');\n      }\n\n      if (_hasOwnProperty$1.call(state.tagMap, handle)) {\n        throwError(state, 'there is a previously declared suffix for \"' + handle + '\" tag handle');\n      }\n\n      if (!PATTERN_TAG_URI.test(prefix)) {\n        throwError(state, 'ill-formed tag prefix (second argument) of the TAG directive');\n      }\n\n      try {\n        prefix = decodeURIComponent(prefix);\n      } catch (err) {\n        throwError(state, 'tag prefix is malformed: ' + prefix);\n      }\n\n      state.tagMap[handle] = prefix;\n    }\n  };\n\n\n  function captureSegment(state, start, end, checkJson) {\n    var _position, _length, _character, _result;\n\n    if (start < end) {\n      _result = state.input.slice(start, end);\n\n      if (checkJson) {\n        for (_position = 0, _length = _result.length; _position < _length; _position += 1) {\n          _character = _result.charCodeAt(_position);\n          if (!(_character === 0x09 ||\n                (0x20 <= _character && _character <= 0x10FFFF))) {\n            throwError(state, 'expected valid JSON character');\n          }\n        }\n      } else if (PATTERN_NON_PRINTABLE.test(_result)) {\n        throwError(state, 'the stream contains non-printable characters');\n      }\n\n      state.result += _result;\n    }\n  }\n\n  function mergeMappings(state, destination, source, overridableKeys) {\n    var sourceKeys, key, index, quantity;\n\n    if (!common.isObject(source)) {\n      throwError(state, 'cannot merge mappings; the provided source object is unacceptable');\n    }\n\n    sourceKeys = Object.keys(source);\n\n    for (index = 0, quantity = sourceKeys.length; index < quantity; index += 1) {\n      key = sourceKeys[index];\n\n      if (!_hasOwnProperty$1.call(destination, key)) {\n        destination[key] = source[key];\n        overridableKeys[key] = true;\n      }\n    }\n  }\n\n  function storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode,\n    startLine, startLineStart, startPos) {\n\n    var index, quantity;\n\n    // The output is a plain object here, so keys can only be strings.\n    // We need to convert keyNode to a string, but doing so can hang the process\n    // (deeply nested arrays that explode exponentially using aliases).\n    if (Array.isArray(keyNode)) {\n      keyNode = Array.prototype.slice.call(keyNode);\n\n      for (index = 0, quantity = keyNode.length; index < quantity; index += 1) {\n        if (Array.isArray(keyNode[index])) {\n          throwError(state, 'nested arrays are not supported inside keys');\n        }\n\n        if (typeof keyNode === 'object' && _class(keyNode[index]) === '[object Object]') {\n          keyNode[index] = '[object Object]';\n        }\n      }\n    }\n\n    // Avoid code execution in load() via toString property\n    // (still use its own toString for arrays, timestamps,\n    // and whatever user schema extensions happen to have @@toStringTag)\n    if (typeof keyNode === 'object' && _class(keyNode) === '[object Object]') {\n      keyNode = '[object Object]';\n    }\n\n\n    keyNode = String(keyNode);\n\n    if (_result === null) {\n      _result = {};\n    }\n\n    if (keyTag === 'tag:yaml.org,2002:merge') {\n      if (Array.isArray(valueNode)) {\n        for (index = 0, quantity = valueNode.length; index < quantity; index += 1) {\n          mergeMappings(state, _result, valueNode[index], overridableKeys);\n        }\n      } else {\n        mergeMappings(state, _result, valueNode, overridableKeys);\n      }\n    } else {\n      if (!state.json &&\n          !_hasOwnProperty$1.call(overridableKeys, keyNode) &&\n          _hasOwnProperty$1.call(_result, keyNode)) {\n        state.line = startLine || state.line;\n        state.lineStart = startLineStart || state.lineStart;\n        state.position = startPos || state.position;\n        throwError(state, 'duplicated mapping key');\n      }\n\n      // used for this specific key only because Object.defineProperty is slow\n      if (keyNode === '__proto__') {\n        Object.defineProperty(_result, keyNode, {\n          configurable: true,\n          enumerable: true,\n          writable: true,\n          value: valueNode\n        });\n      } else {\n        _result[keyNode] = valueNode;\n      }\n      delete overridableKeys[keyNode];\n    }\n\n    return _result;\n  }\n\n  function readLineBreak(state) {\n    var ch;\n\n    ch = state.input.charCodeAt(state.position);\n\n    if (ch === 0x0A/* LF */) {\n      state.position++;\n    } else if (ch === 0x0D/* CR */) {\n      state.position++;\n      if (state.input.charCodeAt(state.position) === 0x0A/* LF */) {\n        state.position++;\n      }\n    } else {\n      throwError(state, 'a line break is expected');\n    }\n\n    state.line += 1;\n    state.lineStart = state.position;\n    state.firstTabInLine = -1;\n  }\n\n  function skipSeparationSpace(state, allowComments, checkIndent) {\n    var lineBreaks = 0,\n        ch = state.input.charCodeAt(state.position);\n\n    while (ch !== 0) {\n      while (is_WHITE_SPACE(ch)) {\n        if (ch === 0x09/* Tab */ && state.firstTabInLine === -1) {\n          state.firstTabInLine = state.position;\n        }\n        ch = state.input.charCodeAt(++state.position);\n      }\n\n      if (allowComments && ch === 0x23/* # */) {\n        do {\n          ch = state.input.charCodeAt(++state.position);\n        } while (ch !== 0x0A/* LF */ && ch !== 0x0D/* CR */ && ch !== 0);\n      }\n\n      if (is_EOL(ch)) {\n        readLineBreak(state);\n\n        ch = state.input.charCodeAt(state.position);\n        lineBreaks++;\n        state.lineIndent = 0;\n\n        while (ch === 0x20/* Space */) {\n          state.lineIndent++;\n          ch = state.input.charCodeAt(++state.position);\n        }\n      } else {\n        break;\n      }\n    }\n\n    if (checkIndent !== -1 && lineBreaks !== 0 && state.lineIndent < checkIndent) {\n      throwWarning(state, 'deficient indentation');\n    }\n\n    return lineBreaks;\n  }\n\n  function testDocumentSeparator(state) {\n    var _position = state.position,\n        ch;\n\n    ch = state.input.charCodeAt(_position);\n\n    // Condition state.position === state.lineStart is tested\n    // in parent on each call, for efficiency. No needs to test here again.\n    if ((ch === 0x2D/* - */ || ch === 0x2E/* . */) &&\n        ch === state.input.charCodeAt(_position + 1) &&\n        ch === state.input.charCodeAt(_position + 2)) {\n\n      _position += 3;\n\n      ch = state.input.charCodeAt(_position);\n\n      if (ch === 0 || is_WS_OR_EOL(ch)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  function writeFoldedLines(state, count) {\n    if (count === 1) {\n      state.result += ' ';\n    } else if (count > 1) {\n      state.result += common.repeat('\\n', count - 1);\n    }\n  }\n\n\n  function readPlainScalar(state, nodeIndent, withinFlowCollection) {\n    var preceding,\n        following,\n        captureStart,\n        captureEnd,\n        hasPendingContent,\n        _line,\n        _lineStart,\n        _lineIndent,\n        _kind = state.kind,\n        _result = state.result,\n        ch;\n\n    ch = state.input.charCodeAt(state.position);\n\n    if (is_WS_OR_EOL(ch)      ||\n        is_FLOW_INDICATOR(ch) ||\n        ch === 0x23/* # */    ||\n        ch === 0x26/* & */    ||\n        ch === 0x2A/* * */    ||\n        ch === 0x21/* ! */    ||\n        ch === 0x7C/* | */    ||\n        ch === 0x3E/* > */    ||\n        ch === 0x27/* ' */    ||\n        ch === 0x22/* \" */    ||\n        ch === 0x25/* % */    ||\n        ch === 0x40/* @ */    ||\n        ch === 0x60/* ` */) {\n      return false;\n    }\n\n    if (ch === 0x3F/* ? */ || ch === 0x2D/* - */) {\n      following = state.input.charCodeAt(state.position + 1);\n\n      if (is_WS_OR_EOL(following) ||\n          withinFlowCollection && is_FLOW_INDICATOR(following)) {\n        return false;\n      }\n    }\n\n    state.kind = 'scalar';\n    state.result = '';\n    captureStart = captureEnd = state.position;\n    hasPendingContent = false;\n\n    while (ch !== 0) {\n      if (ch === 0x3A/* : */) {\n        following = state.input.charCodeAt(state.position + 1);\n\n        if (is_WS_OR_EOL(following) ||\n            withinFlowCollection && is_FLOW_INDICATOR(following)) {\n          break;\n        }\n\n      } else if (ch === 0x23/* # */) {\n        preceding = state.input.charCodeAt(state.position - 1);\n\n        if (is_WS_OR_EOL(preceding)) {\n          break;\n        }\n\n      } else if ((state.position === state.lineStart && testDocumentSeparator(state)) ||\n                 withinFlowCollection && is_FLOW_INDICATOR(ch)) {\n        break;\n\n      } else if (is_EOL(ch)) {\n        _line = state.line;\n        _lineStart = state.lineStart;\n        _lineIndent = state.lineIndent;\n        skipSeparationSpace(state, false, -1);\n\n        if (state.lineIndent >= nodeIndent) {\n          hasPendingContent = true;\n          ch = state.input.charCodeAt(state.position);\n          continue;\n        } else {\n          state.position = captureEnd;\n          state.line = _line;\n          state.lineStart = _lineStart;\n          state.lineIndent = _lineIndent;\n          break;\n        }\n      }\n\n      if (hasPendingContent) {\n        captureSegment(state, captureStart, captureEnd, false);\n        writeFoldedLines(state, state.line - _line);\n        captureStart = captureEnd = state.position;\n        hasPendingContent = false;\n      }\n\n      if (!is_WHITE_SPACE(ch)) {\n        captureEnd = state.position + 1;\n      }\n\n      ch = state.input.charCodeAt(++state.position);\n    }\n\n    captureSegment(state, captureStart, captureEnd, false);\n\n    if (state.result) {\n      return true;\n    }\n\n    state.kind = _kind;\n    state.result = _result;\n    return false;\n  }\n\n  function readSingleQuotedScalar(state, nodeIndent) {\n    var ch,\n        captureStart, captureEnd;\n\n    ch = state.input.charCodeAt(state.position);\n\n    if (ch !== 0x27/* ' */) {\n      return false;\n    }\n\n    state.kind = 'scalar';\n    state.result = '';\n    state.position++;\n    captureStart = captureEnd = state.position;\n\n    while ((ch = state.input.charCodeAt(state.position)) !== 0) {\n      if (ch === 0x27/* ' */) {\n        captureSegment(state, captureStart, state.position, true);\n        ch = state.input.charCodeAt(++state.position);\n\n        if (ch === 0x27/* ' */) {\n          captureStart = state.position;\n          state.position++;\n          captureEnd = state.position;\n        } else {\n          return true;\n        }\n\n      } else if (is_EOL(ch)) {\n        captureSegment(state, captureStart, captureEnd, true);\n        writeFoldedLines(state, skipSeparationSpace(state, false, nodeIndent));\n        captureStart = captureEnd = state.position;\n\n      } else if (state.position === state.lineStart && testDocumentSeparator(state)) {\n        throwError(state, 'unexpected end of the document within a single quoted scalar');\n\n      } else {\n        state.position++;\n        captureEnd = state.position;\n      }\n    }\n\n    throwError(state, 'unexpected end of the stream within a single quoted scalar');\n  }\n\n  function readDoubleQuotedScalar(state, nodeIndent) {\n    var captureStart,\n        captureEnd,\n        hexLength,\n        hexResult,\n        tmp,\n        ch;\n\n    ch = state.input.charCodeAt(state.position);\n\n    if (ch !== 0x22/* \" */) {\n      return false;\n    }\n\n    state.kind = 'scalar';\n    state.result = '';\n    state.position++;\n    captureStart = captureEnd = state.position;\n\n    while ((ch = state.input.charCodeAt(state.position)) !== 0) {\n      if (ch === 0x22/* \" */) {\n        captureSegment(state, captureStart, state.position, true);\n        state.position++;\n        return true;\n\n      } else if (ch === 0x5C/* \\ */) {\n        captureSegment(state, captureStart, state.position, true);\n        ch = state.input.charCodeAt(++state.position);\n\n        if (is_EOL(ch)) {\n          skipSeparationSpace(state, false, nodeIndent);\n\n          // TODO: rework to inline fn with no type cast?\n        } else if (ch < 256 && simpleEscapeCheck[ch]) {\n          state.result += simpleEscapeMap[ch];\n          state.position++;\n\n        } else if ((tmp = escapedHexLen(ch)) > 0) {\n          hexLength = tmp;\n          hexResult = 0;\n\n          for (; hexLength > 0; hexLength--) {\n            ch = state.input.charCodeAt(++state.position);\n\n            if ((tmp = fromHexCode(ch)) >= 0) {\n              hexResult = (hexResult << 4) + tmp;\n\n            } else {\n              throwError(state, 'expected hexadecimal character');\n            }\n          }\n\n          state.result += charFromCodepoint(hexResult);\n\n          state.position++;\n\n        } else {\n          throwError(state, 'unknown escape sequence');\n        }\n\n        captureStart = captureEnd = state.position;\n\n      } else if (is_EOL(ch)) {\n        captureSegment(state, captureStart, captureEnd, true);\n        writeFoldedLines(state, skipSeparationSpace(state, false, nodeIndent));\n        captureStart = captureEnd = state.position;\n\n      } else if (state.position === state.lineStart && testDocumentSeparator(state)) {\n        throwError(state, 'unexpected end of the document within a double quoted scalar');\n\n      } else {\n        state.position++;\n        captureEnd = state.position;\n      }\n    }\n\n    throwError(state, 'unexpected end of the stream within a double quoted scalar');\n  }\n\n  function readFlowCollection(state, nodeIndent) {\n    var readNext = true,\n        _line,\n        _lineStart,\n        _pos,\n        _tag     = state.tag,\n        _result,\n        _anchor  = state.anchor,\n        following,\n        terminator,\n        isPair,\n        isExplicitPair,\n        isMapping,\n        overridableKeys = Object.create(null),\n        keyNode,\n        keyTag,\n        valueNode,\n        ch;\n\n    ch = state.input.charCodeAt(state.position);\n\n    if (ch === 0x5B/* [ */) {\n      terminator = 0x5D;/* ] */\n      isMapping = false;\n      _result = [];\n    } else if (ch === 0x7B/* { */) {\n      terminator = 0x7D;/* } */\n      isMapping = true;\n      _result = {};\n    } else {\n      return false;\n    }\n\n    if (state.anchor !== null) {\n      state.anchorMap[state.anchor] = _result;\n    }\n\n    ch = state.input.charCodeAt(++state.position);\n\n    while (ch !== 0) {\n      skipSeparationSpace(state, true, nodeIndent);\n\n      ch = state.input.charCodeAt(state.position);\n\n      if (ch === terminator) {\n        state.position++;\n        state.tag = _tag;\n        state.anchor = _anchor;\n        state.kind = isMapping ? 'mapping' : 'sequence';\n        state.result = _result;\n        return true;\n      } else if (!readNext) {\n        throwError(state, 'missed comma between flow collection entries');\n      } else if (ch === 0x2C/* , */) {\n        // \"flow collection entries can never be completely empty\", as per YAML 1.2, section 7.4\n        throwError(state, \"expected the node content, but found ','\");\n      }\n\n      keyTag = keyNode = valueNode = null;\n      isPair = isExplicitPair = false;\n\n      if (ch === 0x3F/* ? */) {\n        following = state.input.charCodeAt(state.position + 1);\n\n        if (is_WS_OR_EOL(following)) {\n          isPair = isExplicitPair = true;\n          state.position++;\n          skipSeparationSpace(state, true, nodeIndent);\n        }\n      }\n\n      _line = state.line; // Save the current line.\n      _lineStart = state.lineStart;\n      _pos = state.position;\n      composeNode(state, nodeIndent, CONTEXT_FLOW_IN, false, true);\n      keyTag = state.tag;\n      keyNode = state.result;\n      skipSeparationSpace(state, true, nodeIndent);\n\n      ch = state.input.charCodeAt(state.position);\n\n      if ((isExplicitPair || state.line === _line) && ch === 0x3A/* : */) {\n        isPair = true;\n        ch = state.input.charCodeAt(++state.position);\n        skipSeparationSpace(state, true, nodeIndent);\n        composeNode(state, nodeIndent, CONTEXT_FLOW_IN, false, true);\n        valueNode = state.result;\n      }\n\n      if (isMapping) {\n        storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode, _line, _lineStart, _pos);\n      } else if (isPair) {\n        _result.push(storeMappingPair(state, null, overridableKeys, keyTag, keyNode, valueNode, _line, _lineStart, _pos));\n      } else {\n        _result.push(keyNode);\n      }\n\n      skipSeparationSpace(state, true, nodeIndent);\n\n      ch = state.input.charCodeAt(state.position);\n\n      if (ch === 0x2C/* , */) {\n        readNext = true;\n        ch = state.input.charCodeAt(++state.position);\n      } else {\n        readNext = false;\n      }\n    }\n\n    throwError(state, 'unexpected end of the stream within a flow collection');\n  }\n\n  function readBlockScalar(state, nodeIndent) {\n    var captureStart,\n        folding,\n        chomping       = CHOMPING_CLIP,\n        didReadContent = false,\n        detectedIndent = false,\n        textIndent     = nodeIndent,\n        emptyLines     = 0,\n        atMoreIndented = false,\n        tmp,\n        ch;\n\n    ch = state.input.charCodeAt(state.position);\n\n    if (ch === 0x7C/* | */) {\n      folding = false;\n    } else if (ch === 0x3E/* > */) {\n      folding = true;\n    } else {\n      return false;\n    }\n\n    state.kind = 'scalar';\n    state.result = '';\n\n    while (ch !== 0) {\n      ch = state.input.charCodeAt(++state.position);\n\n      if (ch === 0x2B/* + */ || ch === 0x2D/* - */) {\n        if (CHOMPING_CLIP === chomping) {\n          chomping = (ch === 0x2B/* + */) ? CHOMPING_KEEP : CHOMPING_STRIP;\n        } else {\n          throwError(state, 'repeat of a chomping mode identifier');\n        }\n\n      } else if ((tmp = fromDecimalCode(ch)) >= 0) {\n        if (tmp === 0) {\n          throwError(state, 'bad explicit indentation width of a block scalar; it cannot be less than one');\n        } else if (!detectedIndent) {\n          textIndent = nodeIndent + tmp - 1;\n          detectedIndent = true;\n        } else {\n          throwError(state, 'repeat of an indentation width identifier');\n        }\n\n      } else {\n        break;\n      }\n    }\n\n    if (is_WHITE_SPACE(ch)) {\n      do { ch = state.input.charCodeAt(++state.position); }\n      while (is_WHITE_SPACE(ch));\n\n      if (ch === 0x23/* # */) {\n        do { ch = state.input.charCodeAt(++state.position); }\n        while (!is_EOL(ch) && (ch !== 0));\n      }\n    }\n\n    while (ch !== 0) {\n      readLineBreak(state);\n      state.lineIndent = 0;\n\n      ch = state.input.charCodeAt(state.position);\n\n      while ((!detectedIndent || state.lineIndent < textIndent) &&\n             (ch === 0x20/* Space */)) {\n        state.lineIndent++;\n        ch = state.input.charCodeAt(++state.position);\n      }\n\n      if (!detectedIndent && state.lineIndent > textIndent) {\n        textIndent = state.lineIndent;\n      }\n\n      if (is_EOL(ch)) {\n        emptyLines++;\n        continue;\n      }\n\n      // End of the scalar.\n      if (state.lineIndent < textIndent) {\n\n        // Perform the chomping.\n        if (chomping === CHOMPING_KEEP) {\n          state.result += common.repeat('\\n', didReadContent ? 1 + emptyLines : emptyLines);\n        } else if (chomping === CHOMPING_CLIP) {\n          if (didReadContent) { // i.e. only if the scalar is not empty.\n            state.result += '\\n';\n          }\n        }\n\n        // Break this `while` cycle and go to the funciton's epilogue.\n        break;\n      }\n\n      // Folded style: use fancy rules to handle line breaks.\n      if (folding) {\n\n        // Lines starting with white space characters (more-indented lines) are not folded.\n        if (is_WHITE_SPACE(ch)) {\n          atMoreIndented = true;\n          // except for the first content line (cf. Example 8.1)\n          state.result += common.repeat('\\n', didReadContent ? 1 + emptyLines : emptyLines);\n\n        // End of more-indented block.\n        } else if (atMoreIndented) {\n          atMoreIndented = false;\n          state.result += common.repeat('\\n', emptyLines + 1);\n\n        // Just one line break - perceive as the same line.\n        } else if (emptyLines === 0) {\n          if (didReadContent) { // i.e. only if we have already read some scalar content.\n            state.result += ' ';\n          }\n\n        // Several line breaks - perceive as different lines.\n        } else {\n          state.result += common.repeat('\\n', emptyLines);\n        }\n\n      // Literal style: just add exact number of line breaks between content lines.\n      } else {\n        // Keep all line breaks except the header line break.\n        state.result += common.repeat('\\n', didReadContent ? 1 + emptyLines : emptyLines);\n      }\n\n      didReadContent = true;\n      detectedIndent = true;\n      emptyLines = 0;\n      captureStart = state.position;\n\n      while (!is_EOL(ch) && (ch !== 0)) {\n        ch = state.input.charCodeAt(++state.position);\n      }\n\n      captureSegment(state, captureStart, state.position, false);\n    }\n\n    return true;\n  }\n\n  function readBlockSequence(state, nodeIndent) {\n    var _line,\n        _tag      = state.tag,\n        _anchor   = state.anchor,\n        _result   = [],\n        following,\n        detected  = false,\n        ch;\n\n    // there is a leading tab before this token, so it can't be a block sequence/mapping;\n    // it can still be flow sequence/mapping or a scalar\n    if (state.firstTabInLine !== -1) return false;\n\n    if (state.anchor !== null) {\n      state.anchorMap[state.anchor] = _result;\n    }\n\n    ch = state.input.charCodeAt(state.position);\n\n    while (ch !== 0) {\n      if (state.firstTabInLine !== -1) {\n        state.position = state.firstTabInLine;\n        throwError(state, 'tab characters must not be used in indentation');\n      }\n\n      if (ch !== 0x2D/* - */) {\n        break;\n      }\n\n      following = state.input.charCodeAt(state.position + 1);\n\n      if (!is_WS_OR_EOL(following)) {\n        break;\n      }\n\n      detected = true;\n      state.position++;\n\n      if (skipSeparationSpace(state, true, -1)) {\n        if (state.lineIndent <= nodeIndent) {\n          _result.push(null);\n          ch = state.input.charCodeAt(state.position);\n          continue;\n        }\n      }\n\n      _line = state.line;\n      composeNode(state, nodeIndent, CONTEXT_BLOCK_IN, false, true);\n      _result.push(state.result);\n      skipSeparationSpace(state, true, -1);\n\n      ch = state.input.charCodeAt(state.position);\n\n      if ((state.line === _line || state.lineIndent > nodeIndent) && (ch !== 0)) {\n        throwError(state, 'bad indentation of a sequence entry');\n      } else if (state.lineIndent < nodeIndent) {\n        break;\n      }\n    }\n\n    if (detected) {\n      state.tag = _tag;\n      state.anchor = _anchor;\n      state.kind = 'sequence';\n      state.result = _result;\n      return true;\n    }\n    return false;\n  }\n\n  function readBlockMapping(state, nodeIndent, flowIndent) {\n    var following,\n        allowCompact,\n        _line,\n        _keyLine,\n        _keyLineStart,\n        _keyPos,\n        _tag          = state.tag,\n        _anchor       = state.anchor,\n        _result       = {},\n        overridableKeys = Object.create(null),\n        keyTag        = null,\n        keyNode       = null,\n        valueNode     = null,\n        atExplicitKey = false,\n        detected      = false,\n        ch;\n\n    // there is a leading tab before this token, so it can't be a block sequence/mapping;\n    // it can still be flow sequence/mapping or a scalar\n    if (state.firstTabInLine !== -1) return false;\n\n    if (state.anchor !== null) {\n      state.anchorMap[state.anchor] = _result;\n    }\n\n    ch = state.input.charCodeAt(state.position);\n\n    while (ch !== 0) {\n      if (!atExplicitKey && state.firstTabInLine !== -1) {\n        state.position = state.firstTabInLine;\n        throwError(state, 'tab characters must not be used in indentation');\n      }\n\n      following = state.input.charCodeAt(state.position + 1);\n      _line = state.line; // Save the current line.\n\n      //\n      // Explicit notation case. There are two separate blocks:\n      // first for the key (denoted by \"?\") and second for the value (denoted by \":\")\n      //\n      if ((ch === 0x3F/* ? */ || ch === 0x3A/* : */) && is_WS_OR_EOL(following)) {\n\n        if (ch === 0x3F/* ? */) {\n          if (atExplicitKey) {\n            storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null, _keyLine, _keyLineStart, _keyPos);\n            keyTag = keyNode = valueNode = null;\n          }\n\n          detected = true;\n          atExplicitKey = true;\n          allowCompact = true;\n\n        } else if (atExplicitKey) {\n          // i.e. 0x3A/* : */ === character after the explicit key.\n          atExplicitKey = false;\n          allowCompact = true;\n\n        } else {\n          throwError(state, 'incomplete explicit mapping pair; a key node is missed; or followed by a non-tabulated empty line');\n        }\n\n        state.position += 1;\n        ch = following;\n\n      //\n      // Implicit notation case. Flow-style node as the key first, then \":\", and the value.\n      //\n      } else {\n        _keyLine = state.line;\n        _keyLineStart = state.lineStart;\n        _keyPos = state.position;\n\n        if (!composeNode(state, flowIndent, CONTEXT_FLOW_OUT, false, true)) {\n          // Neither implicit nor explicit notation.\n          // Reading is done. Go to the epilogue.\n          break;\n        }\n\n        if (state.line === _line) {\n          ch = state.input.charCodeAt(state.position);\n\n          while (is_WHITE_SPACE(ch)) {\n            ch = state.input.charCodeAt(++state.position);\n          }\n\n          if (ch === 0x3A/* : */) {\n            ch = state.input.charCodeAt(++state.position);\n\n            if (!is_WS_OR_EOL(ch)) {\n              throwError(state, 'a whitespace character is expected after the key-value separator within a block mapping');\n            }\n\n            if (atExplicitKey) {\n              storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null, _keyLine, _keyLineStart, _keyPos);\n              keyTag = keyNode = valueNode = null;\n            }\n\n            detected = true;\n            atExplicitKey = false;\n            allowCompact = false;\n            keyTag = state.tag;\n            keyNode = state.result;\n\n          } else if (detected) {\n            throwError(state, 'can not read an implicit mapping pair; a colon is missed');\n\n          } else {\n            state.tag = _tag;\n            state.anchor = _anchor;\n            return true; // Keep the result of `composeNode`.\n          }\n\n        } else if (detected) {\n          throwError(state, 'can not read a block mapping entry; a multiline key may not be an implicit key');\n\n        } else {\n          state.tag = _tag;\n          state.anchor = _anchor;\n          return true; // Keep the result of `composeNode`.\n        }\n      }\n\n      //\n      // Common reading code for both explicit and implicit notations.\n      //\n      if (state.line === _line || state.lineIndent > nodeIndent) {\n        if (atExplicitKey) {\n          _keyLine = state.line;\n          _keyLineStart = state.lineStart;\n          _keyPos = state.position;\n        }\n\n        if (composeNode(state, nodeIndent, CONTEXT_BLOCK_OUT, true, allowCompact)) {\n          if (atExplicitKey) {\n            keyNode = state.result;\n          } else {\n            valueNode = state.result;\n          }\n        }\n\n        if (!atExplicitKey) {\n          storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode, _keyLine, _keyLineStart, _keyPos);\n          keyTag = keyNode = valueNode = null;\n        }\n\n        skipSeparationSpace(state, true, -1);\n        ch = state.input.charCodeAt(state.position);\n      }\n\n      if ((state.line === _line || state.lineIndent > nodeIndent) && (ch !== 0)) {\n        throwError(state, 'bad indentation of a mapping entry');\n      } else if (state.lineIndent < nodeIndent) {\n        break;\n      }\n    }\n\n    //\n    // Epilogue.\n    //\n\n    // Special case: last mapping's node contains only the key in explicit notation.\n    if (atExplicitKey) {\n      storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null, _keyLine, _keyLineStart, _keyPos);\n    }\n\n    // Expose the resulting mapping.\n    if (detected) {\n      state.tag = _tag;\n      state.anchor = _anchor;\n      state.kind = 'mapping';\n      state.result = _result;\n    }\n\n    return detected;\n  }\n\n  function readTagProperty(state) {\n    var _position,\n        isVerbatim = false,\n        isNamed    = false,\n        tagHandle,\n        tagName,\n        ch;\n\n    ch = state.input.charCodeAt(state.position);\n\n    if (ch !== 0x21/* ! */) return false;\n\n    if (state.tag !== null) {\n      throwError(state, 'duplication of a tag property');\n    }\n\n    ch = state.input.charCodeAt(++state.position);\n\n    if (ch === 0x3C/* < */) {\n      isVerbatim = true;\n      ch = state.input.charCodeAt(++state.position);\n\n    } else if (ch === 0x21/* ! */) {\n      isNamed = true;\n      tagHandle = '!!';\n      ch = state.input.charCodeAt(++state.position);\n\n    } else {\n      tagHandle = '!';\n    }\n\n    _position = state.position;\n\n    if (isVerbatim) {\n      do { ch = state.input.charCodeAt(++state.position); }\n      while (ch !== 0 && ch !== 0x3E/* > */);\n\n      if (state.position < state.length) {\n        tagName = state.input.slice(_position, state.position);\n        ch = state.input.charCodeAt(++state.position);\n      } else {\n        throwError(state, 'unexpected end of the stream within a verbatim tag');\n      }\n    } else {\n      while (ch !== 0 && !is_WS_OR_EOL(ch)) {\n\n        if (ch === 0x21/* ! */) {\n          if (!isNamed) {\n            tagHandle = state.input.slice(_position - 1, state.position + 1);\n\n            if (!PATTERN_TAG_HANDLE.test(tagHandle)) {\n              throwError(state, 'named tag handle cannot contain such characters');\n            }\n\n            isNamed = true;\n            _position = state.position + 1;\n          } else {\n            throwError(state, 'tag suffix cannot contain exclamation marks');\n          }\n        }\n\n        ch = state.input.charCodeAt(++state.position);\n      }\n\n      tagName = state.input.slice(_position, state.position);\n\n      if (PATTERN_FLOW_INDICATORS.test(tagName)) {\n        throwError(state, 'tag suffix cannot contain flow indicator characters');\n      }\n    }\n\n    if (tagName && !PATTERN_TAG_URI.test(tagName)) {\n      throwError(state, 'tag name cannot contain such characters: ' + tagName);\n    }\n\n    try {\n      tagName = decodeURIComponent(tagName);\n    } catch (err) {\n      throwError(state, 'tag name is malformed: ' + tagName);\n    }\n\n    if (isVerbatim) {\n      state.tag = tagName;\n\n    } else if (_hasOwnProperty$1.call(state.tagMap, tagHandle)) {\n      state.tag = state.tagMap[tagHandle] + tagName;\n\n    } else if (tagHandle === '!') {\n      state.tag = '!' + tagName;\n\n    } else if (tagHandle === '!!') {\n      state.tag = 'tag:yaml.org,2002:' + tagName;\n\n    } else {\n      throwError(state, 'undeclared tag handle \"' + tagHandle + '\"');\n    }\n\n    return true;\n  }\n\n  function readAnchorProperty(state) {\n    var _position,\n        ch;\n\n    ch = state.input.charCodeAt(state.position);\n\n    if (ch !== 0x26/* & */) return false;\n\n    if (state.anchor !== null) {\n      throwError(state, 'duplication of an anchor property');\n    }\n\n    ch = state.input.charCodeAt(++state.position);\n    _position = state.position;\n\n    while (ch !== 0 && !is_WS_OR_EOL(ch) && !is_FLOW_INDICATOR(ch)) {\n      ch = state.input.charCodeAt(++state.position);\n    }\n\n    if (state.position === _position) {\n      throwError(state, 'name of an anchor node must contain at least one character');\n    }\n\n    state.anchor = state.input.slice(_position, state.position);\n    return true;\n  }\n\n  function readAlias(state) {\n    var _position, alias,\n        ch;\n\n    ch = state.input.charCodeAt(state.position);\n\n    if (ch !== 0x2A/* * */) return false;\n\n    ch = state.input.charCodeAt(++state.position);\n    _position = state.position;\n\n    while (ch !== 0 && !is_WS_OR_EOL(ch) && !is_FLOW_INDICATOR(ch)) {\n      ch = state.input.charCodeAt(++state.position);\n    }\n\n    if (state.position === _position) {\n      throwError(state, 'name of an alias node must contain at least one character');\n    }\n\n    alias = state.input.slice(_position, state.position);\n\n    if (!_hasOwnProperty$1.call(state.anchorMap, alias)) {\n      throwError(state, 'unidentified alias \"' + alias + '\"');\n    }\n\n    state.result = state.anchorMap[alias];\n    skipSeparationSpace(state, true, -1);\n    return true;\n  }\n\n  function composeNode(state, parentIndent, nodeContext, allowToSeek, allowCompact) {\n    var allowBlockStyles,\n        allowBlockScalars,\n        allowBlockCollections,\n        indentStatus = 1, // 1: this>parent, 0: this=parent, -1: this<parent\n        atNewLine  = false,\n        hasContent = false,\n        typeIndex,\n        typeQuantity,\n        typeList,\n        type,\n        flowIndent,\n        blockIndent;\n\n    if (state.listener !== null) {\n      state.listener('open', state);\n    }\n\n    state.tag    = null;\n    state.anchor = null;\n    state.kind   = null;\n    state.result = null;\n\n    allowBlockStyles = allowBlockScalars = allowBlockCollections =\n      CONTEXT_BLOCK_OUT === nodeContext ||\n      CONTEXT_BLOCK_IN  === nodeContext;\n\n    if (allowToSeek) {\n      if (skipSeparationSpace(state, true, -1)) {\n        atNewLine = true;\n\n        if (state.lineIndent > parentIndent) {\n          indentStatus = 1;\n        } else if (state.lineIndent === parentIndent) {\n          indentStatus = 0;\n        } else if (state.lineIndent < parentIndent) {\n          indentStatus = -1;\n        }\n      }\n    }\n\n    if (indentStatus === 1) {\n      while (readTagProperty(state) || readAnchorProperty(state)) {\n        if (skipSeparationSpace(state, true, -1)) {\n          atNewLine = true;\n          allowBlockCollections = allowBlockStyles;\n\n          if (state.lineIndent > parentIndent) {\n            indentStatus = 1;\n          } else if (state.lineIndent === parentIndent) {\n            indentStatus = 0;\n          } else if (state.lineIndent < parentIndent) {\n            indentStatus = -1;\n          }\n        } else {\n          allowBlockCollections = false;\n        }\n      }\n    }\n\n    if (allowBlockCollections) {\n      allowBlockCollections = atNewLine || allowCompact;\n    }\n\n    if (indentStatus === 1 || CONTEXT_BLOCK_OUT === nodeContext) {\n      if (CONTEXT_FLOW_IN === nodeContext || CONTEXT_FLOW_OUT === nodeContext) {\n        flowIndent = parentIndent;\n      } else {\n        flowIndent = parentIndent + 1;\n      }\n\n      blockIndent = state.position - state.lineStart;\n\n      if (indentStatus === 1) {\n        if (allowBlockCollections &&\n            (readBlockSequence(state, blockIndent) ||\n             readBlockMapping(state, blockIndent, flowIndent)) ||\n            readFlowCollection(state, flowIndent)) {\n          hasContent = true;\n        } else {\n          if ((allowBlockScalars && readBlockScalar(state, flowIndent)) ||\n              readSingleQuotedScalar(state, flowIndent) ||\n              readDoubleQuotedScalar(state, flowIndent)) {\n            hasContent = true;\n\n          } else if (readAlias(state)) {\n            hasContent = true;\n\n            if (state.tag !== null || state.anchor !== null) {\n              throwError(state, 'alias node should not have any properties');\n            }\n\n          } else if (readPlainScalar(state, flowIndent, CONTEXT_FLOW_IN === nodeContext)) {\n            hasContent = true;\n\n            if (state.tag === null) {\n              state.tag = '?';\n            }\n          }\n\n          if (state.anchor !== null) {\n            state.anchorMap[state.anchor] = state.result;\n          }\n        }\n      } else if (indentStatus === 0) {\n        // Special case: block sequences are allowed to have same indentation level as the parent.\n        // http://www.yaml.org/spec/1.2/spec.html#id2799784\n        hasContent = allowBlockCollections && readBlockSequence(state, blockIndent);\n      }\n    }\n\n    if (state.tag === null) {\n      if (state.anchor !== null) {\n        state.anchorMap[state.anchor] = state.result;\n      }\n\n    } else if (state.tag === '?') {\n      // Implicit resolving is not allowed for non-scalar types, and '?'\n      // non-specific tag is only automatically assigned to plain scalars.\n      //\n      // We only need to check kind conformity in case user explicitly assigns '?'\n      // tag, for example like this: \"!<?> [0]\"\n      //\n      if (state.result !== null && state.kind !== 'scalar') {\n        throwError(state, 'unacceptable node kind for !<?> tag; it should be \"scalar\", not \"' + state.kind + '\"');\n      }\n\n      for (typeIndex = 0, typeQuantity = state.implicitTypes.length; typeIndex < typeQuantity; typeIndex += 1) {\n        type = state.implicitTypes[typeIndex];\n\n        if (type.resolve(state.result)) { // `state.result` updated in resolver if matched\n          state.result = type.construct(state.result);\n          state.tag = type.tag;\n          if (state.anchor !== null) {\n            state.anchorMap[state.anchor] = state.result;\n          }\n          break;\n        }\n      }\n    } else if (state.tag !== '!') {\n      if (_hasOwnProperty$1.call(state.typeMap[state.kind || 'fallback'], state.tag)) {\n        type = state.typeMap[state.kind || 'fallback'][state.tag];\n      } else {\n        // looking for multi type\n        type = null;\n        typeList = state.typeMap.multi[state.kind || 'fallback'];\n\n        for (typeIndex = 0, typeQuantity = typeList.length; typeIndex < typeQuantity; typeIndex += 1) {\n          if (state.tag.slice(0, typeList[typeIndex].tag.length) === typeList[typeIndex].tag) {\n            type = typeList[typeIndex];\n            break;\n          }\n        }\n      }\n\n      if (!type) {\n        throwError(state, 'unknown tag !<' + state.tag + '>');\n      }\n\n      if (state.result !== null && type.kind !== state.kind) {\n        throwError(state, 'unacceptable node kind for !<' + state.tag + '> tag; it should be \"' + type.kind + '\", not \"' + state.kind + '\"');\n      }\n\n      if (!type.resolve(state.result, state.tag)) { // `state.result` updated in resolver if matched\n        throwError(state, 'cannot resolve a node with !<' + state.tag + '> explicit tag');\n      } else {\n        state.result = type.construct(state.result, state.tag);\n        if (state.anchor !== null) {\n          state.anchorMap[state.anchor] = state.result;\n        }\n      }\n    }\n\n    if (state.listener !== null) {\n      state.listener('close', state);\n    }\n    return state.tag !== null ||  state.anchor !== null || hasContent;\n  }\n\n  function readDocument(state) {\n    var documentStart = state.position,\n        _position,\n        directiveName,\n        directiveArgs,\n        hasDirectives = false,\n        ch;\n\n    state.version = null;\n    state.checkLineBreaks = state.legacy;\n    state.tagMap = Object.create(null);\n    state.anchorMap = Object.create(null);\n\n    while ((ch = state.input.charCodeAt(state.position)) !== 0) {\n      skipSeparationSpace(state, true, -1);\n\n      ch = state.input.charCodeAt(state.position);\n\n      if (state.lineIndent > 0 || ch !== 0x25/* % */) {\n        break;\n      }\n\n      hasDirectives = true;\n      ch = state.input.charCodeAt(++state.position);\n      _position = state.position;\n\n      while (ch !== 0 && !is_WS_OR_EOL(ch)) {\n        ch = state.input.charCodeAt(++state.position);\n      }\n\n      directiveName = state.input.slice(_position, state.position);\n      directiveArgs = [];\n\n      if (directiveName.length < 1) {\n        throwError(state, 'directive name must not be less than one character in length');\n      }\n\n      while (ch !== 0) {\n        while (is_WHITE_SPACE(ch)) {\n          ch = state.input.charCodeAt(++state.position);\n        }\n\n        if (ch === 0x23/* # */) {\n          do { ch = state.input.charCodeAt(++state.position); }\n          while (ch !== 0 && !is_EOL(ch));\n          break;\n        }\n\n        if (is_EOL(ch)) break;\n\n        _position = state.position;\n\n        while (ch !== 0 && !is_WS_OR_EOL(ch)) {\n          ch = state.input.charCodeAt(++state.position);\n        }\n\n        directiveArgs.push(state.input.slice(_position, state.position));\n      }\n\n      if (ch !== 0) readLineBreak(state);\n\n      if (_hasOwnProperty$1.call(directiveHandlers, directiveName)) {\n        directiveHandlers[directiveName](state, directiveName, directiveArgs);\n      } else {\n        throwWarning(state, 'unknown document directive \"' + directiveName + '\"');\n      }\n    }\n\n    skipSeparationSpace(state, true, -1);\n\n    if (state.lineIndent === 0 &&\n        state.input.charCodeAt(state.position)     === 0x2D/* - */ &&\n        state.input.charCodeAt(state.position + 1) === 0x2D/* - */ &&\n        state.input.charCodeAt(state.position + 2) === 0x2D/* - */) {\n      state.position += 3;\n      skipSeparationSpace(state, true, -1);\n\n    } else if (hasDirectives) {\n      throwError(state, 'directives end mark is expected');\n    }\n\n    composeNode(state, state.lineIndent - 1, CONTEXT_BLOCK_OUT, false, true);\n    skipSeparationSpace(state, true, -1);\n\n    if (state.checkLineBreaks &&\n        PATTERN_NON_ASCII_LINE_BREAKS.test(state.input.slice(documentStart, state.position))) {\n      throwWarning(state, 'non-ASCII line breaks are interpreted as content');\n    }\n\n    state.documents.push(state.result);\n\n    if (state.position === state.lineStart && testDocumentSeparator(state)) {\n\n      if (state.input.charCodeAt(state.position) === 0x2E/* . */) {\n        state.position += 3;\n        skipSeparationSpace(state, true, -1);\n      }\n      return;\n    }\n\n    if (state.position < (state.length - 1)) {\n      throwError(state, 'end of the stream or a document separator is expected');\n    } else {\n      return;\n    }\n  }\n\n\n  function loadDocuments(input, options) {\n    input = String(input);\n    options = options || {};\n\n    if (input.length !== 0) {\n\n      // Add tailing `\\n` if not exists\n      if (input.charCodeAt(input.length - 1) !== 0x0A/* LF */ &&\n          input.charCodeAt(input.length - 1) !== 0x0D/* CR */) {\n        input += '\\n';\n      }\n\n      // Strip BOM\n      if (input.charCodeAt(0) === 0xFEFF) {\n        input = input.slice(1);\n      }\n    }\n\n    var state = new State$1(input, options);\n\n    var nullpos = input.indexOf('\\0');\n\n    if (nullpos !== -1) {\n      state.position = nullpos;\n      throwError(state, 'null byte is not allowed in input');\n    }\n\n    // Use 0 as string terminator. That significantly simplifies bounds check.\n    state.input += '\\0';\n\n    while (state.input.charCodeAt(state.position) === 0x20/* Space */) {\n      state.lineIndent += 1;\n      state.position += 1;\n    }\n\n    while (state.position < (state.length - 1)) {\n      readDocument(state);\n    }\n\n    return state.documents;\n  }\n\n\n  function loadAll$1(input, iterator, options) {\n    if (iterator !== null && typeof iterator === 'object' && typeof options === 'undefined') {\n      options = iterator;\n      iterator = null;\n    }\n\n    var documents = loadDocuments(input, options);\n\n    if (typeof iterator !== 'function') {\n      return documents;\n    }\n\n    for (var index = 0, length = documents.length; index < length; index += 1) {\n      iterator(documents[index]);\n    }\n  }\n\n\n  function load$1(input, options) {\n    var documents = loadDocuments(input, options);\n\n    if (documents.length === 0) {\n      /*eslint-disable no-undefined*/\n      return undefined;\n    } else if (documents.length === 1) {\n      return documents[0];\n    }\n    throw new exception('expected a single document in the stream, but found more');\n  }\n\n\n  var loadAll_1 = loadAll$1;\n  var load_1    = load$1;\n\n  var loader = {\n  \tloadAll: loadAll_1,\n  \tload: load_1\n  };\n\n  /*eslint-disable no-use-before-define*/\n\n\n\n\n\n  var _toString       = Object.prototype.toString;\n  var _hasOwnProperty = Object.prototype.hasOwnProperty;\n\n  var CHAR_BOM                  = 0xFEFF;\n  var CHAR_TAB                  = 0x09; /* Tab */\n  var CHAR_LINE_FEED            = 0x0A; /* LF */\n  var CHAR_CARRIAGE_RETURN      = 0x0D; /* CR */\n  var CHAR_SPACE                = 0x20; /* Space */\n  var CHAR_EXCLAMATION          = 0x21; /* ! */\n  var CHAR_DOUBLE_QUOTE         = 0x22; /* \" */\n  var CHAR_SHARP                = 0x23; /* # */\n  var CHAR_PERCENT              = 0x25; /* % */\n  var CHAR_AMPERSAND            = 0x26; /* & */\n  var CHAR_SINGLE_QUOTE         = 0x27; /* ' */\n  var CHAR_ASTERISK             = 0x2A; /* * */\n  var CHAR_COMMA                = 0x2C; /* , */\n  var CHAR_MINUS                = 0x2D; /* - */\n  var CHAR_COLON                = 0x3A; /* : */\n  var CHAR_EQUALS               = 0x3D; /* = */\n  var CHAR_GREATER_THAN         = 0x3E; /* > */\n  var CHAR_QUESTION             = 0x3F; /* ? */\n  var CHAR_COMMERCIAL_AT        = 0x40; /* @ */\n  var CHAR_LEFT_SQUARE_BRACKET  = 0x5B; /* [ */\n  var CHAR_RIGHT_SQUARE_BRACKET = 0x5D; /* ] */\n  var CHAR_GRAVE_ACCENT         = 0x60; /* ` */\n  var CHAR_LEFT_CURLY_BRACKET   = 0x7B; /* { */\n  var CHAR_VERTICAL_LINE        = 0x7C; /* | */\n  var CHAR_RIGHT_CURLY_BRACKET  = 0x7D; /* } */\n\n  var ESCAPE_SEQUENCES = {};\n\n  ESCAPE_SEQUENCES[0x00]   = '\\\\0';\n  ESCAPE_SEQUENCES[0x07]   = '\\\\a';\n  ESCAPE_SEQUENCES[0x08]   = '\\\\b';\n  ESCAPE_SEQUENCES[0x09]   = '\\\\t';\n  ESCAPE_SEQUENCES[0x0A]   = '\\\\n';\n  ESCAPE_SEQUENCES[0x0B]   = '\\\\v';\n  ESCAPE_SEQUENCES[0x0C]   = '\\\\f';\n  ESCAPE_SEQUENCES[0x0D]   = '\\\\r';\n  ESCAPE_SEQUENCES[0x1B]   = '\\\\e';\n  ESCAPE_SEQUENCES[0x22]   = '\\\\\"';\n  ESCAPE_SEQUENCES[0x5C]   = '\\\\\\\\';\n  ESCAPE_SEQUENCES[0x85]   = '\\\\N';\n  ESCAPE_SEQUENCES[0xA0]   = '\\\\_';\n  ESCAPE_SEQUENCES[0x2028] = '\\\\L';\n  ESCAPE_SEQUENCES[0x2029] = '\\\\P';\n\n  var DEPRECATED_BOOLEANS_SYNTAX = [\n    'y', 'Y', 'yes', 'Yes', 'YES', 'on', 'On', 'ON',\n    'n', 'N', 'no', 'No', 'NO', 'off', 'Off', 'OFF'\n  ];\n\n  var DEPRECATED_BASE60_SYNTAX = /^[-+]?[0-9_]+(?::[0-9_]+)+(?:\\.[0-9_]*)?$/;\n\n  function compileStyleMap(schema, map) {\n    var result, keys, index, length, tag, style, type;\n\n    if (map === null) return {};\n\n    result = {};\n    keys = Object.keys(map);\n\n    for (index = 0, length = keys.length; index < length; index += 1) {\n      tag = keys[index];\n      style = String(map[tag]);\n\n      if (tag.slice(0, 2) === '!!') {\n        tag = 'tag:yaml.org,2002:' + tag.slice(2);\n      }\n      type = schema.compiledTypeMap['fallback'][tag];\n\n      if (type && _hasOwnProperty.call(type.styleAliases, style)) {\n        style = type.styleAliases[style];\n      }\n\n      result[tag] = style;\n    }\n\n    return result;\n  }\n\n  function encodeHex(character) {\n    var string, handle, length;\n\n    string = character.toString(16).toUpperCase();\n\n    if (character <= 0xFF) {\n      handle = 'x';\n      length = 2;\n    } else if (character <= 0xFFFF) {\n      handle = 'u';\n      length = 4;\n    } else if (character <= 0xFFFFFFFF) {\n      handle = 'U';\n      length = 8;\n    } else {\n      throw new exception('code point within a string may not be greater than 0xFFFFFFFF');\n    }\n\n    return '\\\\' + handle + common.repeat('0', length - string.length) + string;\n  }\n\n\n  var QUOTING_TYPE_SINGLE = 1,\n      QUOTING_TYPE_DOUBLE = 2;\n\n  function State(options) {\n    this.schema        = options['schema'] || _default;\n    this.indent        = Math.max(1, (options['indent'] || 2));\n    this.noArrayIndent = options['noArrayIndent'] || false;\n    this.skipInvalid   = options['skipInvalid'] || false;\n    this.flowLevel     = (common.isNothing(options['flowLevel']) ? -1 : options['flowLevel']);\n    this.styleMap      = compileStyleMap(this.schema, options['styles'] || null);\n    this.sortKeys      = options['sortKeys'] || false;\n    this.lineWidth     = options['lineWidth'] || 80;\n    this.noRefs        = options['noRefs'] || false;\n    this.noCompatMode  = options['noCompatMode'] || false;\n    this.condenseFlow  = options['condenseFlow'] || false;\n    this.quotingType   = options['quotingType'] === '\"' ? QUOTING_TYPE_DOUBLE : QUOTING_TYPE_SINGLE;\n    this.forceQuotes   = options['forceQuotes'] || false;\n    this.replacer      = typeof options['replacer'] === 'function' ? options['replacer'] : null;\n\n    this.implicitTypes = this.schema.compiledImplicit;\n    this.explicitTypes = this.schema.compiledExplicit;\n\n    this.tag = null;\n    this.result = '';\n\n    this.duplicates = [];\n    this.usedDuplicates = null;\n  }\n\n  // Indents every line in a string. Empty lines (\\n only) are not indented.\n  function indentString(string, spaces) {\n    var ind = common.repeat(' ', spaces),\n        position = 0,\n        next = -1,\n        result = '',\n        line,\n        length = string.length;\n\n    while (position < length) {\n      next = string.indexOf('\\n', position);\n      if (next === -1) {\n        line = string.slice(position);\n        position = length;\n      } else {\n        line = string.slice(position, next + 1);\n        position = next + 1;\n      }\n\n      if (line.length && line !== '\\n') result += ind;\n\n      result += line;\n    }\n\n    return result;\n  }\n\n  function generateNextLine(state, level) {\n    return '\\n' + common.repeat(' ', state.indent * level);\n  }\n\n  function testImplicitResolving(state, str) {\n    var index, length, type;\n\n    for (index = 0, length = state.implicitTypes.length; index < length; index += 1) {\n      type = state.implicitTypes[index];\n\n      if (type.resolve(str)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  // [33] s-white ::= s-space | s-tab\n  function isWhitespace(c) {\n    return c === CHAR_SPACE || c === CHAR_TAB;\n  }\n\n  // Returns true if the character can be printed without escaping.\n  // From YAML 1.2: \"any allowed characters known to be non-printable\n  // should also be escaped. [However,] This isn’t mandatory\"\n  // Derived from nb-char - \\t - #x85 - #xA0 - #x2028 - #x2029.\n  function isPrintable(c) {\n    return  (0x00020 <= c && c <= 0x00007E)\n        || ((0x000A1 <= c && c <= 0x00D7FF) && c !== 0x2028 && c !== 0x2029)\n        || ((0x0E000 <= c && c <= 0x00FFFD) && c !== CHAR_BOM)\n        ||  (0x10000 <= c && c <= 0x10FFFF);\n  }\n\n  // [34] ns-char ::= nb-char - s-white\n  // [27] nb-char ::= c-printable - b-char - c-byte-order-mark\n  // [26] b-char  ::= b-line-feed | b-carriage-return\n  // Including s-white (for some reason, examples doesn't match specs in this aspect)\n  // ns-char ::= c-printable - b-line-feed - b-carriage-return - c-byte-order-mark\n  function isNsCharOrWhitespace(c) {\n    return isPrintable(c)\n      && c !== CHAR_BOM\n      // - b-char\n      && c !== CHAR_CARRIAGE_RETURN\n      && c !== CHAR_LINE_FEED;\n  }\n\n  // [127]  ns-plain-safe(c) ::= c = flow-out  ⇒ ns-plain-safe-out\n  //                             c = flow-in   ⇒ ns-plain-safe-in\n  //                             c = block-key ⇒ ns-plain-safe-out\n  //                             c = flow-key  ⇒ ns-plain-safe-in\n  // [128] ns-plain-safe-out ::= ns-char\n  // [129]  ns-plain-safe-in ::= ns-char - c-flow-indicator\n  // [130]  ns-plain-char(c) ::=  ( ns-plain-safe(c) - “:” - “#” )\n  //                            | ( /* An ns-char preceding */ “#” )\n  //                            | ( “:” /* Followed by an ns-plain-safe(c) */ )\n  function isPlainSafe(c, prev, inblock) {\n    var cIsNsCharOrWhitespace = isNsCharOrWhitespace(c);\n    var cIsNsChar = cIsNsCharOrWhitespace && !isWhitespace(c);\n    return (\n      // ns-plain-safe\n      inblock ? // c = flow-in\n        cIsNsCharOrWhitespace\n        : cIsNsCharOrWhitespace\n          // - c-flow-indicator\n          && c !== CHAR_COMMA\n          && c !== CHAR_LEFT_SQUARE_BRACKET\n          && c !== CHAR_RIGHT_SQUARE_BRACKET\n          && c !== CHAR_LEFT_CURLY_BRACKET\n          && c !== CHAR_RIGHT_CURLY_BRACKET\n    )\n      // ns-plain-char\n      && c !== CHAR_SHARP // false on '#'\n      && !(prev === CHAR_COLON && !cIsNsChar) // false on ': '\n      || (isNsCharOrWhitespace(prev) && !isWhitespace(prev) && c === CHAR_SHARP) // change to true on '[^ ]#'\n      || (prev === CHAR_COLON && cIsNsChar); // change to true on ':[^ ]'\n  }\n\n  // Simplified test for values allowed as the first character in plain style.\n  function isPlainSafeFirst(c) {\n    // Uses a subset of ns-char - c-indicator\n    // where ns-char = nb-char - s-white.\n    // No support of ( ( “?” | “:” | “-” ) /* Followed by an ns-plain-safe(c)) */ ) part\n    return isPrintable(c) && c !== CHAR_BOM\n      && !isWhitespace(c) // - s-white\n      // - (c-indicator ::=\n      // “-” | “?” | “:” | “,” | “[” | “]” | “{” | “}”\n      && c !== CHAR_MINUS\n      && c !== CHAR_QUESTION\n      && c !== CHAR_COLON\n      && c !== CHAR_COMMA\n      && c !== CHAR_LEFT_SQUARE_BRACKET\n      && c !== CHAR_RIGHT_SQUARE_BRACKET\n      && c !== CHAR_LEFT_CURLY_BRACKET\n      && c !== CHAR_RIGHT_CURLY_BRACKET\n      // | “#” | “&” | “*” | “!” | “|” | “=” | “>” | “'” | “\"”\n      && c !== CHAR_SHARP\n      && c !== CHAR_AMPERSAND\n      && c !== CHAR_ASTERISK\n      && c !== CHAR_EXCLAMATION\n      && c !== CHAR_VERTICAL_LINE\n      && c !== CHAR_EQUALS\n      && c !== CHAR_GREATER_THAN\n      && c !== CHAR_SINGLE_QUOTE\n      && c !== CHAR_DOUBLE_QUOTE\n      // | “%” | “@” | “`”)\n      && c !== CHAR_PERCENT\n      && c !== CHAR_COMMERCIAL_AT\n      && c !== CHAR_GRAVE_ACCENT;\n  }\n\n  // Simplified test for values allowed as the last character in plain style.\n  function isPlainSafeLast(c) {\n    // just not whitespace or colon, it will be checked to be plain character later\n    return !isWhitespace(c) && c !== CHAR_COLON;\n  }\n\n  // Same as 'string'.codePointAt(pos), but works in older browsers.\n  function codePointAt(string, pos) {\n    var first = string.charCodeAt(pos), second;\n    if (first >= 0xD800 && first <= 0xDBFF && pos + 1 < string.length) {\n      second = string.charCodeAt(pos + 1);\n      if (second >= 0xDC00 && second <= 0xDFFF) {\n        // https://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae\n        return (first - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;\n      }\n    }\n    return first;\n  }\n\n  // Determines whether block indentation indicator is required.\n  function needIndentIndicator(string) {\n    var leadingSpaceRe = /^\\n* /;\n    return leadingSpaceRe.test(string);\n  }\n\n  var STYLE_PLAIN   = 1,\n      STYLE_SINGLE  = 2,\n      STYLE_LITERAL = 3,\n      STYLE_FOLDED  = 4,\n      STYLE_DOUBLE  = 5;\n\n  // Determines which scalar styles are possible and returns the preferred style.\n  // lineWidth = -1 => no limit.\n  // Pre-conditions: str.length > 0.\n  // Post-conditions:\n  //    STYLE_PLAIN or STYLE_SINGLE => no \\n are in the string.\n  //    STYLE_LITERAL => no lines are suitable for folding (or lineWidth is -1).\n  //    STYLE_FOLDED => a line > lineWidth and can be folded (and lineWidth != -1).\n  function chooseScalarStyle(string, singleLineOnly, indentPerLevel, lineWidth,\n    testAmbiguousType, quotingType, forceQuotes, inblock) {\n\n    var i;\n    var char = 0;\n    var prevChar = null;\n    var hasLineBreak = false;\n    var hasFoldableLine = false; // only checked if shouldTrackWidth\n    var shouldTrackWidth = lineWidth !== -1;\n    var previousLineBreak = -1; // count the first line correctly\n    var plain = isPlainSafeFirst(codePointAt(string, 0))\n            && isPlainSafeLast(codePointAt(string, string.length - 1));\n\n    if (singleLineOnly || forceQuotes) {\n      // Case: no block styles.\n      // Check for disallowed characters to rule out plain and single.\n      for (i = 0; i < string.length; char >= 0x10000 ? i += 2 : i++) {\n        char = codePointAt(string, i);\n        if (!isPrintable(char)) {\n          return STYLE_DOUBLE;\n        }\n        plain = plain && isPlainSafe(char, prevChar, inblock);\n        prevChar = char;\n      }\n    } else {\n      // Case: block styles permitted.\n      for (i = 0; i < string.length; char >= 0x10000 ? i += 2 : i++) {\n        char = codePointAt(string, i);\n        if (char === CHAR_LINE_FEED) {\n          hasLineBreak = true;\n          // Check if any line can be folded.\n          if (shouldTrackWidth) {\n            hasFoldableLine = hasFoldableLine ||\n              // Foldable line = too long, and not more-indented.\n              (i - previousLineBreak - 1 > lineWidth &&\n               string[previousLineBreak + 1] !== ' ');\n            previousLineBreak = i;\n          }\n        } else if (!isPrintable(char)) {\n          return STYLE_DOUBLE;\n        }\n        plain = plain && isPlainSafe(char, prevChar, inblock);\n        prevChar = char;\n      }\n      // in case the end is missing a \\n\n      hasFoldableLine = hasFoldableLine || (shouldTrackWidth &&\n        (i - previousLineBreak - 1 > lineWidth &&\n         string[previousLineBreak + 1] !== ' '));\n    }\n    // Although every style can represent \\n without escaping, prefer block styles\n    // for multiline, since they're more readable and they don't add empty lines.\n    // Also prefer folding a super-long line.\n    if (!hasLineBreak && !hasFoldableLine) {\n      // Strings interpretable as another type have to be quoted;\n      // e.g. the string 'true' vs. the boolean true.\n      if (plain && !forceQuotes && !testAmbiguousType(string)) {\n        return STYLE_PLAIN;\n      }\n      return quotingType === QUOTING_TYPE_DOUBLE ? STYLE_DOUBLE : STYLE_SINGLE;\n    }\n    // Edge case: block indentation indicator can only have one digit.\n    if (indentPerLevel > 9 && needIndentIndicator(string)) {\n      return STYLE_DOUBLE;\n    }\n    // At this point we know block styles are valid.\n    // Prefer literal style unless we want to fold.\n    if (!forceQuotes) {\n      return hasFoldableLine ? STYLE_FOLDED : STYLE_LITERAL;\n    }\n    return quotingType === QUOTING_TYPE_DOUBLE ? STYLE_DOUBLE : STYLE_SINGLE;\n  }\n\n  // Note: line breaking/folding is implemented for only the folded style.\n  // NB. We drop the last trailing newline (if any) of a returned block scalar\n  //  since the dumper adds its own newline. This always works:\n  //    • No ending newline => unaffected; already using strip \"-\" chomping.\n  //    • Ending newline    => removed then restored.\n  //  Importantly, this keeps the \"+\" chomp indicator from gaining an extra line.\n  function writeScalar(state, string, level, iskey, inblock) {\n    state.dump = (function () {\n      if (string.length === 0) {\n        return state.quotingType === QUOTING_TYPE_DOUBLE ? '\"\"' : \"''\";\n      }\n      if (!state.noCompatMode) {\n        if (DEPRECATED_BOOLEANS_SYNTAX.indexOf(string) !== -1 || DEPRECATED_BASE60_SYNTAX.test(string)) {\n          return state.quotingType === QUOTING_TYPE_DOUBLE ? ('\"' + string + '\"') : (\"'\" + string + \"'\");\n        }\n      }\n\n      var indent = state.indent * Math.max(1, level); // no 0-indent scalars\n      // As indentation gets deeper, let the width decrease monotonically\n      // to the lower bound min(state.lineWidth, 40).\n      // Note that this implies\n      //  state.lineWidth ≤ 40 + state.indent: width is fixed at the lower bound.\n      //  state.lineWidth > 40 + state.indent: width decreases until the lower bound.\n      // This behaves better than a constant minimum width which disallows narrower options,\n      // or an indent threshold which causes the width to suddenly increase.\n      var lineWidth = state.lineWidth === -1\n        ? -1 : Math.max(Math.min(state.lineWidth, 40), state.lineWidth - indent);\n\n      // Without knowing if keys are implicit/explicit, assume implicit for safety.\n      var singleLineOnly = iskey\n        // No block styles in flow mode.\n        || (state.flowLevel > -1 && level >= state.flowLevel);\n      function testAmbiguity(string) {\n        return testImplicitResolving(state, string);\n      }\n\n      switch (chooseScalarStyle(string, singleLineOnly, state.indent, lineWidth,\n        testAmbiguity, state.quotingType, state.forceQuotes && !iskey, inblock)) {\n\n        case STYLE_PLAIN:\n          return string;\n        case STYLE_SINGLE:\n          return \"'\" + string.replace(/'/g, \"''\") + \"'\";\n        case STYLE_LITERAL:\n          return '|' + blockHeader(string, state.indent)\n            + dropEndingNewline(indentString(string, indent));\n        case STYLE_FOLDED:\n          return '>' + blockHeader(string, state.indent)\n            + dropEndingNewline(indentString(foldString(string, lineWidth), indent));\n        case STYLE_DOUBLE:\n          return '\"' + escapeString(string) + '\"';\n        default:\n          throw new exception('impossible error: invalid scalar style');\n      }\n    }());\n  }\n\n  // Pre-conditions: string is valid for a block scalar, 1 <= indentPerLevel <= 9.\n  function blockHeader(string, indentPerLevel) {\n    var indentIndicator = needIndentIndicator(string) ? String(indentPerLevel) : '';\n\n    // note the special case: the string '\\n' counts as a \"trailing\" empty line.\n    var clip =          string[string.length - 1] === '\\n';\n    var keep = clip && (string[string.length - 2] === '\\n' || string === '\\n');\n    var chomp = keep ? '+' : (clip ? '' : '-');\n\n    return indentIndicator + chomp + '\\n';\n  }\n\n  // (See the note for writeScalar.)\n  function dropEndingNewline(string) {\n    return string[string.length - 1] === '\\n' ? string.slice(0, -1) : string;\n  }\n\n  // Note: a long line without a suitable break point will exceed the width limit.\n  // Pre-conditions: every char in str isPrintable, str.length > 0, width > 0.\n  function foldString(string, width) {\n    // In folded style, $k$ consecutive newlines output as $k+1$ newlines—\n    // unless they're before or after a more-indented line, or at the very\n    // beginning or end, in which case $k$ maps to $k$.\n    // Therefore, parse each chunk as newline(s) followed by a content line.\n    var lineRe = /(\\n+)([^\\n]*)/g;\n\n    // first line (possibly an empty line)\n    var result = (function () {\n      var nextLF = string.indexOf('\\n');\n      nextLF = nextLF !== -1 ? nextLF : string.length;\n      lineRe.lastIndex = nextLF;\n      return foldLine(string.slice(0, nextLF), width);\n    }());\n    // If we haven't reached the first content line yet, don't add an extra \\n.\n    var prevMoreIndented = string[0] === '\\n' || string[0] === ' ';\n    var moreIndented;\n\n    // rest of the lines\n    var match;\n    while ((match = lineRe.exec(string))) {\n      var prefix = match[1], line = match[2];\n      moreIndented = (line[0] === ' ');\n      result += prefix\n        + (!prevMoreIndented && !moreIndented && line !== ''\n          ? '\\n' : '')\n        + foldLine(line, width);\n      prevMoreIndented = moreIndented;\n    }\n\n    return result;\n  }\n\n  // Greedy line breaking.\n  // Picks the longest line under the limit each time,\n  // otherwise settles for the shortest line over the limit.\n  // NB. More-indented lines *cannot* be folded, as that would add an extra \\n.\n  function foldLine(line, width) {\n    if (line === '' || line[0] === ' ') return line;\n\n    // Since a more-indented line adds a \\n, breaks can't be followed by a space.\n    var breakRe = / [^ ]/g; // note: the match index will always be <= length-2.\n    var match;\n    // start is an inclusive index. end, curr, and next are exclusive.\n    var start = 0, end, curr = 0, next = 0;\n    var result = '';\n\n    // Invariants: 0 <= start <= length-1.\n    //   0 <= curr <= next <= max(0, length-2). curr - start <= width.\n    // Inside the loop:\n    //   A match implies length >= 2, so curr and next are <= length-2.\n    while ((match = breakRe.exec(line))) {\n      next = match.index;\n      // maintain invariant: curr - start <= width\n      if (next - start > width) {\n        end = (curr > start) ? curr : next; // derive end <= length-2\n        result += '\\n' + line.slice(start, end);\n        // skip the space that was output as \\n\n        start = end + 1;                    // derive start <= length-1\n      }\n      curr = next;\n    }\n\n    // By the invariants, start <= length-1, so there is something left over.\n    // It is either the whole string or a part starting from non-whitespace.\n    result += '\\n';\n    // Insert a break if the remainder is too long and there is a break available.\n    if (line.length - start > width && curr > start) {\n      result += line.slice(start, curr) + '\\n' + line.slice(curr + 1);\n    } else {\n      result += line.slice(start);\n    }\n\n    return result.slice(1); // drop extra \\n joiner\n  }\n\n  // Escapes a double-quoted string.\n  function escapeString(string) {\n    var result = '';\n    var char = 0;\n    var escapeSeq;\n\n    for (var i = 0; i < string.length; char >= 0x10000 ? i += 2 : i++) {\n      char = codePointAt(string, i);\n      escapeSeq = ESCAPE_SEQUENCES[char];\n\n      if (!escapeSeq && isPrintable(char)) {\n        result += string[i];\n        if (char >= 0x10000) result += string[i + 1];\n      } else {\n        result += escapeSeq || encodeHex(char);\n      }\n    }\n\n    return result;\n  }\n\n  function writeFlowSequence(state, level, object) {\n    var _result = '',\n        _tag    = state.tag,\n        index,\n        length,\n        value;\n\n    for (index = 0, length = object.length; index < length; index += 1) {\n      value = object[index];\n\n      if (state.replacer) {\n        value = state.replacer.call(object, String(index), value);\n      }\n\n      // Write only valid elements, put null instead of invalid elements.\n      if (writeNode(state, level, value, false, false) ||\n          (typeof value === 'undefined' &&\n           writeNode(state, level, null, false, false))) {\n\n        if (_result !== '') _result += ',' + (!state.condenseFlow ? ' ' : '');\n        _result += state.dump;\n      }\n    }\n\n    state.tag = _tag;\n    state.dump = '[' + _result + ']';\n  }\n\n  function writeBlockSequence(state, level, object, compact) {\n    var _result = '',\n        _tag    = state.tag,\n        index,\n        length,\n        value;\n\n    for (index = 0, length = object.length; index < length; index += 1) {\n      value = object[index];\n\n      if (state.replacer) {\n        value = state.replacer.call(object, String(index), value);\n      }\n\n      // Write only valid elements, put null instead of invalid elements.\n      if (writeNode(state, level + 1, value, true, true, false, true) ||\n          (typeof value === 'undefined' &&\n           writeNode(state, level + 1, null, true, true, false, true))) {\n\n        if (!compact || _result !== '') {\n          _result += generateNextLine(state, level);\n        }\n\n        if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) {\n          _result += '-';\n        } else {\n          _result += '- ';\n        }\n\n        _result += state.dump;\n      }\n    }\n\n    state.tag = _tag;\n    state.dump = _result || '[]'; // Empty sequence if no valid values.\n  }\n\n  function writeFlowMapping(state, level, object) {\n    var _result       = '',\n        _tag          = state.tag,\n        objectKeyList = Object.keys(object),\n        index,\n        length,\n        objectKey,\n        objectValue,\n        pairBuffer;\n\n    for (index = 0, length = objectKeyList.length; index < length; index += 1) {\n\n      pairBuffer = '';\n      if (_result !== '') pairBuffer += ', ';\n\n      if (state.condenseFlow) pairBuffer += '\"';\n\n      objectKey = objectKeyList[index];\n      objectValue = object[objectKey];\n\n      if (state.replacer) {\n        objectValue = state.replacer.call(object, objectKey, objectValue);\n      }\n\n      if (!writeNode(state, level, objectKey, false, false)) {\n        continue; // Skip this pair because of invalid key;\n      }\n\n      if (state.dump.length > 1024) pairBuffer += '? ';\n\n      pairBuffer += state.dump + (state.condenseFlow ? '\"' : '') + ':' + (state.condenseFlow ? '' : ' ');\n\n      if (!writeNode(state, level, objectValue, false, false)) {\n        continue; // Skip this pair because of invalid value.\n      }\n\n      pairBuffer += state.dump;\n\n      // Both key and value are valid.\n      _result += pairBuffer;\n    }\n\n    state.tag = _tag;\n    state.dump = '{' + _result + '}';\n  }\n\n  function writeBlockMapping(state, level, object, compact) {\n    var _result       = '',\n        _tag          = state.tag,\n        objectKeyList = Object.keys(object),\n        index,\n        length,\n        objectKey,\n        objectValue,\n        explicitPair,\n        pairBuffer;\n\n    // Allow sorting keys so that the output file is deterministic\n    if (state.sortKeys === true) {\n      // Default sorting\n      objectKeyList.sort();\n    } else if (typeof state.sortKeys === 'function') {\n      // Custom sort function\n      objectKeyList.sort(state.sortKeys);\n    } else if (state.sortKeys) {\n      // Something is wrong\n      throw new exception('sortKeys must be a boolean or a function');\n    }\n\n    for (index = 0, length = objectKeyList.length; index < length; index += 1) {\n      pairBuffer = '';\n\n      if (!compact || _result !== '') {\n        pairBuffer += generateNextLine(state, level);\n      }\n\n      objectKey = objectKeyList[index];\n      objectValue = object[objectKey];\n\n      if (state.replacer) {\n        objectValue = state.replacer.call(object, objectKey, objectValue);\n      }\n\n      if (!writeNode(state, level + 1, objectKey, true, true, true)) {\n        continue; // Skip this pair because of invalid key.\n      }\n\n      explicitPair = (state.tag !== null && state.tag !== '?') ||\n                     (state.dump && state.dump.length > 1024);\n\n      if (explicitPair) {\n        if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) {\n          pairBuffer += '?';\n        } else {\n          pairBuffer += '? ';\n        }\n      }\n\n      pairBuffer += state.dump;\n\n      if (explicitPair) {\n        pairBuffer += generateNextLine(state, level);\n      }\n\n      if (!writeNode(state, level + 1, objectValue, true, explicitPair)) {\n        continue; // Skip this pair because of invalid value.\n      }\n\n      if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) {\n        pairBuffer += ':';\n      } else {\n        pairBuffer += ': ';\n      }\n\n      pairBuffer += state.dump;\n\n      // Both key and value are valid.\n      _result += pairBuffer;\n    }\n\n    state.tag = _tag;\n    state.dump = _result || '{}'; // Empty mapping if no valid pairs.\n  }\n\n  function detectType(state, object, explicit) {\n    var _result, typeList, index, length, type, style;\n\n    typeList = explicit ? state.explicitTypes : state.implicitTypes;\n\n    for (index = 0, length = typeList.length; index < length; index += 1) {\n      type = typeList[index];\n\n      if ((type.instanceOf  || type.predicate) &&\n          (!type.instanceOf || ((typeof object === 'object') && (object instanceof type.instanceOf))) &&\n          (!type.predicate  || type.predicate(object))) {\n\n        if (explicit) {\n          if (type.multi && type.representName) {\n            state.tag = type.representName(object);\n          } else {\n            state.tag = type.tag;\n          }\n        } else {\n          state.tag = '?';\n        }\n\n        if (type.represent) {\n          style = state.styleMap[type.tag] || type.defaultStyle;\n\n          if (_toString.call(type.represent) === '[object Function]') {\n            _result = type.represent(object, style);\n          } else if (_hasOwnProperty.call(type.represent, style)) {\n            _result = type.represent[style](object, style);\n          } else {\n            throw new exception('!<' + type.tag + '> tag resolver accepts not \"' + style + '\" style');\n          }\n\n          state.dump = _result;\n        }\n\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  // Serializes `object` and writes it to global `result`.\n  // Returns true on success, or false on invalid object.\n  //\n  function writeNode(state, level, object, block, compact, iskey, isblockseq) {\n    state.tag = null;\n    state.dump = object;\n\n    if (!detectType(state, object, false)) {\n      detectType(state, object, true);\n    }\n\n    var type = _toString.call(state.dump);\n    var inblock = block;\n    var tagStr;\n\n    if (block) {\n      block = (state.flowLevel < 0 || state.flowLevel > level);\n    }\n\n    var objectOrArray = type === '[object Object]' || type === '[object Array]',\n        duplicateIndex,\n        duplicate;\n\n    if (objectOrArray) {\n      duplicateIndex = state.duplicates.indexOf(object);\n      duplicate = duplicateIndex !== -1;\n    }\n\n    if ((state.tag !== null && state.tag !== '?') || duplicate || (state.indent !== 2 && level > 0)) {\n      compact = false;\n    }\n\n    if (duplicate && state.usedDuplicates[duplicateIndex]) {\n      state.dump = '*ref_' + duplicateIndex;\n    } else {\n      if (objectOrArray && duplicate && !state.usedDuplicates[duplicateIndex]) {\n        state.usedDuplicates[duplicateIndex] = true;\n      }\n      if (type === '[object Object]') {\n        if (block && (Object.keys(state.dump).length !== 0)) {\n          writeBlockMapping(state, level, state.dump, compact);\n          if (duplicate) {\n            state.dump = '&ref_' + duplicateIndex + state.dump;\n          }\n        } else {\n          writeFlowMapping(state, level, state.dump);\n          if (duplicate) {\n            state.dump = '&ref_' + duplicateIndex + ' ' + state.dump;\n          }\n        }\n      } else if (type === '[object Array]') {\n        if (block && (state.dump.length !== 0)) {\n          if (state.noArrayIndent && !isblockseq && level > 0) {\n            writeBlockSequence(state, level - 1, state.dump, compact);\n          } else {\n            writeBlockSequence(state, level, state.dump, compact);\n          }\n          if (duplicate) {\n            state.dump = '&ref_' + duplicateIndex + state.dump;\n          }\n        } else {\n          writeFlowSequence(state, level, state.dump);\n          if (duplicate) {\n            state.dump = '&ref_' + duplicateIndex + ' ' + state.dump;\n          }\n        }\n      } else if (type === '[object String]') {\n        if (state.tag !== '?') {\n          writeScalar(state, state.dump, level, iskey, inblock);\n        }\n      } else if (type === '[object Undefined]') {\n        return false;\n      } else {\n        if (state.skipInvalid) return false;\n        throw new exception('unacceptable kind of an object to dump ' + type);\n      }\n\n      if (state.tag !== null && state.tag !== '?') {\n        // Need to encode all characters except those allowed by the spec:\n        //\n        // [35] ns-dec-digit    ::=  [#x30-#x39] /* 0-9 */\n        // [36] ns-hex-digit    ::=  ns-dec-digit\n        //                         | [#x41-#x46] /* A-F */ | [#x61-#x66] /* a-f */\n        // [37] ns-ascii-letter ::=  [#x41-#x5A] /* A-Z */ | [#x61-#x7A] /* a-z */\n        // [38] ns-word-char    ::=  ns-dec-digit | ns-ascii-letter | “-”\n        // [39] ns-uri-char     ::=  “%” ns-hex-digit ns-hex-digit | ns-word-char | “#”\n        //                         | “;” | “/” | “?” | “:” | “@” | “&” | “=” | “+” | “$” | “,”\n        //                         | “_” | “.” | “!” | “~” | “*” | “'” | “(” | “)” | “[” | “]”\n        //\n        // Also need to encode '!' because it has special meaning (end of tag prefix).\n        //\n        tagStr = encodeURI(\n          state.tag[0] === '!' ? state.tag.slice(1) : state.tag\n        ).replace(/!/g, '%21');\n\n        if (state.tag[0] === '!') {\n          tagStr = '!' + tagStr;\n        } else if (tagStr.slice(0, 18) === 'tag:yaml.org,2002:') {\n          tagStr = '!!' + tagStr.slice(18);\n        } else {\n          tagStr = '!<' + tagStr + '>';\n        }\n\n        state.dump = tagStr + ' ' + state.dump;\n      }\n    }\n\n    return true;\n  }\n\n  function getDuplicateReferences(object, state) {\n    var objects = [],\n        duplicatesIndexes = [],\n        index,\n        length;\n\n    inspectNode(object, objects, duplicatesIndexes);\n\n    for (index = 0, length = duplicatesIndexes.length; index < length; index += 1) {\n      state.duplicates.push(objects[duplicatesIndexes[index]]);\n    }\n    state.usedDuplicates = new Array(length);\n  }\n\n  function inspectNode(object, objects, duplicatesIndexes) {\n    var objectKeyList,\n        index,\n        length;\n\n    if (object !== null && typeof object === 'object') {\n      index = objects.indexOf(object);\n      if (index !== -1) {\n        if (duplicatesIndexes.indexOf(index) === -1) {\n          duplicatesIndexes.push(index);\n        }\n      } else {\n        objects.push(object);\n\n        if (Array.isArray(object)) {\n          for (index = 0, length = object.length; index < length; index += 1) {\n            inspectNode(object[index], objects, duplicatesIndexes);\n          }\n        } else {\n          objectKeyList = Object.keys(object);\n\n          for (index = 0, length = objectKeyList.length; index < length; index += 1) {\n            inspectNode(object[objectKeyList[index]], objects, duplicatesIndexes);\n          }\n        }\n      }\n    }\n  }\n\n  function dump$1(input, options) {\n    options = options || {};\n\n    var state = new State(options);\n\n    if (!state.noRefs) getDuplicateReferences(input, state);\n\n    var value = input;\n\n    if (state.replacer) {\n      value = state.replacer.call({ '': value }, '', value);\n    }\n\n    if (writeNode(state, 0, value, true, true)) return state.dump + '\\n';\n\n    return '';\n  }\n\n  var dump_1 = dump$1;\n\n  var dumper = {\n  \tdump: dump_1\n  };\n\n  function renamed(from, to) {\n    return function () {\n      throw new Error('Function yaml.' + from + ' is removed in js-yaml 4. ' +\n        'Use yaml.' + to + ' instead, which is now safe by default.');\n    };\n  }\n\n\n  var Type                = type;\n  var Schema              = schema;\n  var FAILSAFE_SCHEMA     = failsafe;\n  var JSON_SCHEMA         = json;\n  var CORE_SCHEMA         = core;\n  var DEFAULT_SCHEMA      = _default;\n  var load                = loader.load;\n  var loadAll             = loader.loadAll;\n  var dump                = dumper.dump;\n  var YAMLException       = exception;\n\n  // Re-export all types in case user wants to create custom schema\n  var types = {\n    binary:    binary,\n    float:     float,\n    map:       map,\n    null:      _null,\n    pairs:     pairs,\n    set:       set,\n    timestamp: timestamp,\n    bool:      bool,\n    int:       int,\n    merge:     merge,\n    omap:      omap,\n    seq:       seq,\n    str:       str\n  };\n\n  // Removed functions from JS-YAML 3.0.x\n  var safeLoad            = renamed('safeLoad', 'load');\n  var safeLoadAll         = renamed('safeLoadAll', 'loadAll');\n  var safeDump            = renamed('safeDump', 'dump');\n\n  var jsYaml = {\n  \tType: Type,\n  \tSchema: Schema,\n  \tFAILSAFE_SCHEMA: FAILSAFE_SCHEMA,\n  \tJSON_SCHEMA: JSON_SCHEMA,\n  \tCORE_SCHEMA: CORE_SCHEMA,\n  \tDEFAULT_SCHEMA: DEFAULT_SCHEMA,\n  \tload: load,\n  \tloadAll: loadAll,\n  \tdump: dump,\n  \tYAMLException: YAMLException,\n  \ttypes: types,\n  \tsafeLoad: safeLoad,\n  \tsafeLoadAll: safeLoadAll,\n  \tsafeDump: safeDump\n  };\n\n  exports.CORE_SCHEMA = CORE_SCHEMA;\n  exports.DEFAULT_SCHEMA = DEFAULT_SCHEMA;\n  exports.FAILSAFE_SCHEMA = FAILSAFE_SCHEMA;\n  exports.JSON_SCHEMA = JSON_SCHEMA;\n  exports.Schema = Schema;\n  exports.Type = Type;\n  exports.YAMLException = YAMLException;\n  exports.default = jsYaml;\n  exports.dump = dump;\n  exports.load = load;\n  exports.loadAll = loadAll;\n  exports.safeDump = safeDump;\n  exports.safeLoad = safeLoad;\n  exports.safeLoadAll = safeLoadAll;\n  exports.types = types;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n})));",
			"type": "string"
		}
	]
}